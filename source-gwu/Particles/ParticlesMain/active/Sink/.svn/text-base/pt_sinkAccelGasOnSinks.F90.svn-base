!!****if* source/Particles/ParticlesMain/active/Sink/pt_sinkAccelGasOnSinks
!!
!! NAME
!!
!!  pt_sinkAccelGasOnSinks
!!
!! SYNOPSIS
!!
!!  call pt_sinkAccelGasOnSinks()
!!
!! DESCRIPTION
!!
!!
!! ARGUMENTS
!!
!!   No arguments
!!
!! NOTES
!!
!!   written by Robi Banerjee, 2007-2008
!!   modified by Christoph Federrath, 2008-2012
!!   ported to FLASH3.3/4 by Chalence Safranek-Shrader, 2010-2012
!!   modified by Nathan Goldbaum, 2012
!!   refactored for FLASH4 by John Bachan, 2012
!!
!!***

! used to be GasOnSinksAccel
subroutine pt_sinkAccelGasOnSinks()
  ! Computes the accel of sinks for gas
  ! and other quantities which can be mapped to the grid
  !
  ! For cosmology, will also want to get contribution from pde 
  ! (mapped DM delegate particle density) 

  use Particles_sinkData
  use pt_sinkSort
  use pt_sinkInterface, only: pt_sinkGatherGlobal
  
  use Driver_interface, ONLY : Driver_abortFlash
  use Driver_data, ONLY : dr_globalMe
  use RuntimeParameters_interface, ONLY : RuntimeParameters_get
  use tree, ONLY : lnblocks, nodetype
  use Grid_interface, ONLY :  Grid_getCellCoords, Grid_getBlkPhysicalSize, &
                              Grid_getBlkPtr, Grid_releaseBlkPtr, Grid_getBlkIndexLimits
  use Cosmology_interface, ONLY : Cosmology_getRedshift
  use PhysicalConstants_interface, ONLY : PhysicalConstants_get

  implicit none

#include "constants.h"
#include "Flash.h"
#include "Particles.h"
  include "Flash_mpi.h"

  logical, save      :: first_call = .true.
  real, save         :: softening_radius
  real               :: slope, hinv, h2inv, softening_radius_comoving
  real, save         :: maxradius_pbc, newton
  character(len=80)  :: softening_type_gas, grav_boundary_type
  integer            :: i, j, k, p, lb, ierr, n, nx, ny, nz
  real, save         :: xmin, xmax, ymin, ymax, zmin, zmax, Lx, Ly, Lz
  real, save         :: LxPBC(-nrep_pbc:nrep_pbc), LyPBC(-nrep_pbc:nrep_pbc), LzPBC(-nrep_pbc:nrep_pbc)
  integer            :: size_x, size_y, size_z
  integer, save      :: softeningtype
  real               :: dx_block, dy_block, dz_block, dVol
  real               :: dx, dy, dz, radius, q, kernelvalue, r3, ax, ay, az
  real               :: dx_inside, dy_inside, dz_inside
  real               :: prefactor, redshift, oneplusz3
  real               :: size(3)

  integer, allocatable, dimension(:) :: id_sorted, QSindex
  real, allocatable, dimension(:) :: ax_sorted, ay_sorted, az_sorted, ax_total, ay_total, az_total
  real,pointer, dimension(:,:,:,: ) :: solnData
  real, dimension(:), allocatable :: xc, yc, zc
  integer, dimension(2,MDIM) :: blkLimits, blkLimitsGC

  if (first_call) then

     call RuntimeParameters_get("sink_softening_radius", softening_radius)
     call RuntimeParameters_get("sink_softening_type_gas", softening_type_gas)
     select case (softening_type_gas)
     case ("spline")
        softeningtype=1
     case ("linear")
        softeningtype=2
     case default
        softening_type_gas = "linear"
        softeningtype = 2
        if(dr_globalMe .eq. MASTER_PE) print*, "invalid grav softening type specified"
     end select
     if(dr_globalMe .eq. MASTER_PE) print*, "pt_sinkAccelGasOnSinks: grav softening type=", trim(softening_type_gas)

     call RuntimeParameters_get("grav_boundary_type", grav_boundary_type)

     if ((grav_boundary_type.ne."isolated").and.(grav_boundary_type.ne."periodic")) then
        call Driver_abortFlash("Sink particles can only be used with perioidic of isolated gravity type!")
     end if

     call RuntimeParameters_get("xmin", xmin)
     call RuntimeParameters_get("xmax", xmax)

     call RuntimeParameters_get("ymin", ymin)
     call RuntimeParameters_get("ymax", ymax)

     call RuntimeParameters_get("zmin", zmin)
     call RuntimeParameters_get("zmax", zmax)

     Lx = xmax-xmin
     Ly = ymax-ymin
     Lz = zmax-zmin

     if (grav_boundary_type .eq. "periodic") then
        maxradius_pbc = real(nrep_pbc)*min(Lx,Ly,Lz)
        if(dr_globalMe .eq. MASTER_PE) print*, "pt_sinkAccelGasOnSinks: maxradius_pbc = ", maxradius_pbc
        do n=-nrep_pbc,nrep_pbc
           LxPBC(n) = n*Lx
           LyPBC(n) = n*Ly
           LzPBC(n) = n*Lz
        enddo
     end if

     call PhysicalConstants_get("Newton", newton)

     first_call = .false.

  end if

  if (localnpf .eq. 0) return

  call Cosmology_getRedshift(redshift)
  softening_radius_comoving = softening_radius * (1.0 + redshift)

  hinv = 2.0 / softening_radius_comoving
  h2inv = hinv**2
  slope = 1.0 / softening_radius_comoving**3

  oneplusz3 = (1.0 + redshift)**3.0

  ! Exchange particle information
  call pt_sinkGatherGlobal()

  ! Clear global accelerations
  do p = 1, localnpf
     particles_global(ACCX_PART_PROP,p) = 0.0
     particles_global(ACCY_PART_PROP,p) = 0.0
     particles_global(ACCZ_PART_PROP,p) = 0.0
  end do

  ! Loop over blocks
  do lb = 1, lnblocks

     ! only leaf blocks
     if (nodetype(lb) .eq. 1) then

        call Grid_getBlkPtr(lb,solnData)

        call Grid_getBlkIndexLimits(lb, blkLimits, blkLimitsGC)
        size_x = blkLimitsGC(HIGH,IAXIS)-blkLimitsGC(LOW,IAXIS) + 1
        size_y = blkLimitsGC(HIGH,JAXIS)-blkLimitsGC(LOW,JAXIS) + 1
        size_z = blkLimitsGC(HIGH,KAXIS)-blkLimitsGC(LOW,KAXIS) + 1

        allocate(xc(size_x))
        allocate(yc(size_y))
        allocate(zc(size_z))

        call Grid_getCellCoords(IAXIS, lb, CENTER, .true., xc, size_x)
        call Grid_getCellCoords(JAXIS, lb, CENTER, .true., yc, size_y)
        call Grid_getCellCoords(KAXIS, lb, CENTER, .true., zc, size_z)

        call Grid_getBlkPhysicalSize(lb,size)
        dx_block = size(1)/NXB
        dy_block = size(2)/NYB
        dz_block = size(3)/NZB
        dVol = dx_block*dy_block*dz_block

        ! loop over cells (not including guard cells)
        do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
           do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
              do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)

                 prefactor = -newton * solnData(DENS_VAR,i,j,k)  * dVol
#ifdef PDE_VAR
                 prefactor = -newton * (solnData(DENS_VAR,i,j,k) + solnData(PDE_VAR,i,j,k)) * dVol
#endif
                 ! factor of (1+z)^3 needed in cosmological settings:
                 prefactor = prefactor * oneplusz3

                 if(grav_boundary_type .eq. "isolated") then

                    ! Loop over all particles, local and global
                    do p=1, localnpf

                       ! compute relative distances
                       dx = particles_global(POSX_PART_PROP,p) - xc(i)
                       dy = particles_global(POSY_PART_PROP,p) - yc(j)
                       dz = particles_global(POSZ_PART_PROP,p) - zc(k)
                       radius = sqrt(dx*dx+dy*dy+dz*dz)

                       ! compute accel
                       if (radius .lt. softening_radius_comoving) then
                          if(softeningtype .eq. 1) then    ! spline softening
                             q = radius*hinv
                             if ((q.gt.1.0e-5) .and. (q.lt.1.0)) &
                                & kernelvalue = h2inv*(4.0/3.0*q-1.2*q**3+0.5*q**4)/radius
                             if ((q.ge.1.0)    .and. (q.lt.2.0)) &
                                & kernelvalue = h2inv * &
                                & (8.0/3.0*q-3.0*q**2+1.2*q**3-1.0/6.0*q**4-1.0/(15.0*q**2))/radius
                             ax = kernelvalue*dx
                             ay = kernelvalue*dy
                             az = kernelvalue*dz
                          end if

                          if (softeningtype .eq. 2) then ! linear kernel inside softening_radius
                             ax = dx*slope
                             ay = dy*slope
                             az = dz*slope
                          end if
                       else
                          r3 = 1.0 / radius**3
                          ax = dx*r3
                          ay = dy*r3
                          az = dz*r3
                       end if

                       ! add cell contribution to particle accel
                       particles_global(ACCX_PART_PROP,p) = particles_global(ACCX_PART_PROP,p) + & 
                            prefactor*ax
                       particles_global(ACCY_PART_PROP,p) = particles_global(ACCY_PART_PROP,p) + & 
                            prefactor*ay
                       particles_global(ACCZ_PART_PROP,p) = particles_global(ACCZ_PART_PROP,p) + & 
                            prefactor*az

                    end do

                 end if

                 if (grav_boundary_type .eq. "periodic") then

                    do p=1, localnpf

                       ax = 0.0
                       ay = 0.0
                       az = 0.0

                       ! compute relative distances
                       dx_inside = particles_global(POSX_PART_PROP,p) - xc(i)
                       dy_inside = particles_global(POSY_PART_PROP,p) - yc(j)
                       dz_inside = particles_global(POSZ_PART_PROP,p) - zc(k)

                       do nx = -nrep_pbc,nrep_pbc
                          dx = dx_inside + LxPBC(nx)
                          do ny = -nrep_pbc, nrep_pbc
                             dy = dy_inside + LyPBC(ny)
                             do nz = -nrep_pbc, nrep_pbc
                                dz = dz_inside + LzPBC(nz)

                                radius = sqrt(dx*dx+dy*dy+dz*dz)

                                if (radius .lt. maxradius_pbc) then

                                   if (radius .lt. softening_radius_comoving) then

                                      if (softeningtype .eq. 1) then   ! spline softening
                                         q=radius*hinv
                                         if ((q.gt.1.e-5).and.(q.lt.1.0)) &
                                           & kernelvalue = h2inv*(4.0/3.0*q-1.2*q**3+0.5*q**4)/radius
                                         if ((q.ge.1.0)  .and.(q.lt.2.0)) &
                                           & kernelvalue = h2inv * &
                                           & (8.0/3.0*q-3.0*q**2+1.2*q**3-1.0/6.0*q**4-1.0/(15.0*q**2))/radius
                                         ax = ax + kernelvalue*dx
                                         ay = ay + kernelvalue*dy
                                         az = az + kernelvalue*dz
                                      end if
                                      if (softeningtype.eq.2) then ! linear kernel inside smoothing radius
                                         ax = ax + dx*slope
                                         ay = ay + dy*slope
                                         az = az + dz*slope
                                      endif
                                   else
                                      r3 = 1.0/radius**3
                                      ax = ax + dx*r3
                                      ay = ay + dy*r3
                                      az = az + dz*r3
                                   endif

                                end if ! within maxradius_pbc

                             enddo  ! nz
                          enddo    ! ny
                       enddo      ! nz

                       ! add cell contribution to particle acceleration
                       particles_global(ACCX_PART_PROP,p) = particles_global(ACCX_PART_PROP,p) + & 
                            prefactor*ax
                       particles_global(ACCY_PART_PROP,p) = particles_global(ACCY_PART_PROP,p) + & 
                            prefactor*ay
                       particles_global(ACCZ_PART_PROP,p) = particles_global(ACCZ_PART_PROP,p) + & 
                            prefactor*az

                    enddo  ! particles

                 endif    ! gravity boundary

              enddo  ! i
           enddo  ! j
        enddo  ! k

        call Grid_releaseBlkPtr(lb,solnData)

        deallocate(xc)
        deallocate(yc)
        deallocate(zc)

     end if   ! nodetype

  enddo  ! loop over blocks

  ! allocate temporary arrays

  allocate (id_sorted(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate id_sorted")
  allocate (QSindex(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate QSindex")
  allocate (ax_sorted(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate ax_sorted")
  allocate (ay_sorted(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate ay_sorted")
  allocate (az_sorted(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate az_sorted")
  allocate (ax_total(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate ax_total")
  allocate (ay_total(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate ay_total")
  allocate (az_total(localnpf), stat=ierr)
  if (ierr.ne.0) call Driver_abortFlash ("pt_sinkAccelGasOnSinks:  could not allocate az_total")

  ! sort global particles list before global all sum
  do p = 1, localnpf
     id_sorted(p) = int(particles_global(iptag,p))
  enddo

  call NewQsort_IN(id_sorted, QSindex)

  ! now particles are sorted by their tag
  do p = 1, localnpf
     ax_sorted(p) = particles_global(ACCX_PART_PROP, QSindex(p))
     ay_sorted(p) = particles_global(ACCY_PART_PROP, QSindex(p))
     az_sorted(p) = particles_global(ACCZ_PART_PROP, QSindex(p))
     ax_total(p) = 0.0
     ay_total(p) = 0.0
     az_total(p) = 0.0
  enddo

  ! Communicate to get total contribution from all cells on all procs
  call MPI_ALLREDUCE(ax_sorted, ax_total, localnpf, FLASH_REAL, MPI_SUM, MPI_COMM_WORLD, ierr)
  call MPI_ALLREDUCE(ay_sorted, ay_total, localnpf, FLASH_REAL, MPI_SUM, MPI_COMM_WORLD, ierr)
  call MPI_ALLREDUCE(az_sorted, az_total, localnpf, FLASH_REAL, MPI_SUM, MPI_COMM_WORLD, ierr)

  do p = 1, localnpf
     particles_global(ACCX_PART_PROP, QSindex(p)) = ax_total(p)
     particles_global(ACCY_PART_PROP, QSindex(p)) = ay_total(p)
     particles_global(ACCZ_PART_PROP, QSindex(p)) = az_total(p)
  end do

  do p = 1, localnp
     particles_local(ACCX_PART_PROP,p) = particles_global(ACCX_PART_PROP,p)
     particles_local(ACCY_PART_PROP,p) = particles_global(ACCY_PART_PROP,p)
     particles_local(ACCZ_PART_PROP,p) = particles_global(ACCZ_PART_PROP,p)

  end do

  deallocate (id_sorted)
  deallocate (QSindex)
  deallocate (ax_sorted)
  deallocate (ay_sorted)
  deallocate (az_sorted)
  deallocate (ax_total)
  deallocate (ay_total)
  deallocate (az_total)

  return

end subroutine pt_sinkAccelGasOnSinks
