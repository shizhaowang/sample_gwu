!!****if* source/Driver/DriverMain/Driver_computeDt
!!
!! NAME
!!
!!  Driver_computeDt
!!
!!
!! SYNOPSIS
!!
!!  Driver_computeDt(integer(IN) :: nbegin,
!!                  integer(IN) :: nstep, 
!!                  real(IN)    :: simTime,
!!                  real(IN)    :: dtOld,
!!                  real(OUT)   :: dtNew)
!!
!! DESCRIPTION
!!
!!  Determine the stability-limited time step.
!!  This timestep is determined using information from the included
!!  physics modules - many different timestep limiters are polled.
!!
!!  The global driver might use a different (hopefully smaller) time
!!  step, to match a file write time (tplot or trstr) or if the
!!  simulation end time has been reached; such possibilities are
!!  not considered here.
!!
!! ARGUMENTS
!!
!!  nbegin - first step of the simulation (nbegin is only used
!!              to determine if a label header should be written to
!!              the screen)
!!  nstep - current step of the simulation
!!  simTime - current simulation time of the run
!!  dtOld - the dt from the timestep that we just finished 
!!         (it's old because we be using dtOld to calculate 
!!          and return the dt for the next timestep (dtNew)
!!  dtNew - returned value of the dt calculated for the next timestep
!!
!! NOTES
!!
!! The Driver unit uses a few unit scope variables that are
!! accessible to all routines within the unit, but not to the
!! routines outside the unit. These variables begin with "dr_"
!! like, dr_globalMe or dr_dt, dr_beginStep, and are stored in fortran
!! module Driver_data (in file Driver_data.F90. The other variables
!! are local to the specific routine and do not have the prefix "dr_"
!!
!! The calls to units currently not included in the code are commented out.
!!
!!
!!
!!*** 
#ifdef DEBUG_ALL
#define DEBUG_DRIVER
#endif


subroutine dr_limitDt(blockID, blkLimits, blkLimitsGC, solnData, dt_check, dt_minloc)

  use Driver_data, ONLY : dr_meshMe
  
  implicit none
  
#include "constants.h"
#include "Flash.h"
#include "Eos.h"  

  
  integer, intent(IN)    :: blockID
  integer, intent(IN)    :: blkLimits(2,MDIM)
  integer, intent(IN)    :: blkLimitsGC(2,MDIM)
  real,    intent(INOUT) :: solnData(NUNK_VARS, blkLimitsGC(LOW,IAXIS):blkLimitsGC(HIGH,IAXIS), &
                                                blkLimitsGC(LOW,JAXIS):blkLimitsGC(HIGH,JAXIS), &
                                                blkLimitsGC(LOW,KAXIS):blkLimitsGC(HIGH,KAXIS))
  real, intent(INOUT)    :: dt_check
  integer, intent(INOUT) :: dt_minloc(5)
  
  integer :: NStep
  
  integer :: i, j, k
  integer :: temploc(5)
  real    :: energyLogRate, invEnergyLogRate
  real    :: change, dt_temp

 
  dt_temp       = HUGE(1.0)
  temploc(:)    = 0
  energyLogRate = TINY(0.0)

  return
#ifdef EINT_VAR
  !! if first step store energy into old variable.    
  call Driver_getNStep(NStep)

  if (NSTEP == 1) then
     
     solnData(OLEN_VAR,:,:,:) = solnData(EINT_VAR,:,:,:)
     
  else
     
     do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
        do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
           do i = blkLimits(LOW,IAXIS),blkLimits(HIGH,IAXIS)

              change = abs(solnData(EINT_VAR,i,j,k)-solnData(OLEN_VAR,i,j,k))

              if ((change/solnData(OLEN_VAR,i,j,k)) > energyLogRate) then

                 energyLogRate = change/solnData(OLEN_VAR,i,j,k)            
                 
                 temploc(1) = i
                 temploc(2) = j
                 temploc(3) = k
                 temploc(4) = blockID
                 temploc(5) = dr_meshMe

              end if

              
           end do
        end do
     end do
     
     if (energyLogRate == 0.0) then
        invEnergyLogRate = HUGE(1.0)
     else
        invEnergyLogRate = 1.0/energyLogRate
     end if
     
     dt_temp = 0.2*invEnergyLogRate*dt_check     

     solnData(OLEN_VAR,:,:,:) = solnData(EINT_VAR,:,:,:)

  end if


  dt_check = dt_temp
  dt_minloc = temploc
  
  if(dt_check <= 0.0) call Driver_abortFlash("[Diffuse]: computed dt is not positive! Aborting!")  

#endif

  return

end subroutine dr_limitDt
