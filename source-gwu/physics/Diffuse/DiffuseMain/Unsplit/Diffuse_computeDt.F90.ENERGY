!!****if* source/physics/Diffuse/DiffuseMain/Diffuse_computeDt
!!
!! NAME
!!  
!!  Diffuse_computeDt
!!
!!
!! SYNOPSIS
!! 
!!  Diffuse_computeDt ( integer(IN) : blockID, 
!!                  real(IN):  xCenter(:), 
!!                  real(IN):  xLeft(:), 
!!                  real(IN):  xRight(:), 
!!                  real(IN): dx(:), 
!!                  real(IN): uxgrid(:),
!!                  real(IN):  yCenter(:), 
!!                  real(IN):  yLeft(:), 
!!                  real(IN):  yRight(:), 
!!                  real(IN): dy(:), 
!!                  real(IN): uygrid(:), 
!!                  real(IN):  zCenter(:), 
!!                  real(IN):  zLeft(:), 
!!                  real(IN):  zRight(:), 
!!                  real(IN): dz(:), 
!!                  real(IN): uzgrid(:), 
!!                  real,pointer :  solnData(:,:,:,:),   
!!                  real,(INOUT):   dt_check, 
!!                  integer(INOUT): dt_minloc(:) )
!!  
!! DESCRIPTION
!!
!!  Computes the timestep limiter for diffusion source term solver.
!! 
!!  The current implementation may be very conservative, especially with
!!  respect to the viscosity term.  Users may want to change the implementation
!!  to be less conservative, and/or tweak the time step by tweaking the
!!  dt_diff_factor runtime parameter.
!!
!! ARGUMENTS
!!
!!  blockID        local block ID
!!  xCenter         X coordinates at the center of the cell
!!  xLeft           X coordinates at the left edge of the cell
!!  xRight          X coordinates at the right edge of the cell
!!  yCenter         Y coordinates at the center of the cell
!!  yLeft           Y coordinates at the left edge of the cell
!!  yRight          Y coordinates at the right edge of the cell
!!  zCenter         Z coordinates at the center of the cell
!!  zLeft           Z coordinates at the left edge of the cell
!!  zRight          Z coordinates at the right edge of the cell
!!  d*              deltas in each {*=x, y z} directions
!!  u*grid          velocity of grid expansion in {*=x, y z} directions
!!  solnData        the physical, solution data from grid
!!  dt_check        variable to hold timestep constraint
!!  dt_minloc(5)    array to hold limiting zone info:  zone indices
!!
!!***


subroutine Diffuse_computeDt (blockID, &
                              xCenter,xLeft,xRight, dx, uxgrid, &
                              yCenter,yLeft,yRight, dy, uygrid, &
                              zCenter,zLeft,zRight, dz, uzgrid, &
                              blkLimits,blkLimitsGC,        &
                              solnData,   &
                              dt_check, dt_minloc )


  use Diffuse_data, ONLY : dt_diff_factor, diffusion_cutoff_density, dirGeom, &
                           useDiffuseSpecies,useDiffuseVisc,useDiffuseTherm,  &
                           useDiffuseMagneticResistivity,useDiffuse,          &
                           diff_useRadDiffusion, diff_useEleCond, diff_useERad,&
                           diff_asol, diff_meshMe

    use Diffuse_data, ONLY : useDiffuse, diff_meshMe, diff_meshcomm,&
       diff_useRadDiffusion, diff_useEleCond, diff_useERad,diff_asol, &
       diff_useRadFlxLimiter, diff_mele, diff_boltz, &
       diff_singleSpeciesA, diff_singleSpeciesZ, diff_avo, diff_mele, &
       diff_eleFlMode, diff_eleFlCoef


  use Driver_interface, ONLY : Driver_abortFlash
  use Conductivity_interface, ONLY : Conductivity
  use MassDiffusivity_interface, ONLY : MassDiffusivity
  use Viscosity_interface, ONLY : Viscosity
  use MagneticResistivity_interface, ONLY : MagneticResistivity 
  use Opacity_interface, ONLY: Opacity
  use PhysicalConstants_interface, ONLY: PhysicalConstants_get

  implicit none

#include "constants.h"
#include "Flash.h"

  integer, intent(IN) :: blockID
  integer, intent(IN),dimension(2,MDIM)::blkLimits,blkLimitsGC
  real,INTENT(INOUT)    :: dt_check
  integer,INTENT(INOUT)    :: dt_minloc(5)
  real, pointer, dimension(:,:,:,:) :: solnData

  real, dimension(blkLimitsGC(LOW,IAXIS):blkLimitsGC(HIGH,IAXIS)), intent(IN) :: &
       xCenter,xLeft,xRight
  real, dimension(blkLimitsGC(LOW,JAXIS):blkLimitsGC(HIGH,JAXIS)), intent(IN) :: &
       yCenter,yLeft,yRight
  real, dimension(blkLimitsGC(LOW,KAXIS):blkLimitsGC(HIGH,KAXIS)), intent(IN) ::&
        zCenter,zLeft,zRight
  real, dimension(blkLimitsGC(LOW,IAXIS):blkLimitsGC(HIGH,IAXIS)), intent(IN) :: &
       dx, uxgrid
  real, dimension(blkLimitsGC(LOW,JAXIS):blkLimitsGC(HIGH,JAXIS)), intent(IN) :: &
       dy, uygrid
  real, dimension(blkLimitsGC(LOW,KAXIS):blkLimitsGC(HIGH,KAXIS)), intent(IN) :: &
       dz, uzgrid


  integer :: i, j, k,n
  integer :: temploc(5)
  real :: energyLogRate, invEnergyLogRate
  real, allocatable :: faceAreas  (:,:,:,:)
  real, allocatable :: cellVolumes(:,:,:)
  real, dimension(MDIM)     :: del
  integer :: datasize(MDIM), TempToUse,EnerToUse
  real :: cond_zone, diff_coeff, xdens, xtemp
  real :: massfrac(NSPECIES), Ye
  real :: condimh, condiph
  real :: condjmh, condjph
  real :: condkmh, condkph
  real :: deltaEINT, dt_temp, sumE 
  logical :: ldiff

  real :: EINT_MAX
  
 
  ldiff = .false.
  
#ifdef TELE_VAR
  if (diff_useEleCond) then 
     TempToUse  = TELE_VAR 
     ldiff      = .true.
     EnerToUse  = EELE_VAR
  end if
#else
  if (useDiffuse) then
     TempToUse = TEMP_VAR ! The default would follow Electron power law.
     ldiff     = .true.     
     EnerToUse = EINT_VAR
  end if
#endif
  
  if(.not.ldiff) return !! Simply return if diffusion is turned off  
  
  dt_temp       = HUGE(1.0)
  temploc(:)    = 0
  energyLogRate = TINY(0.0)
  

  EINT_MAX = 3.0E17
  
  do k = blkLimits(LOW,KAXIS)-K3D, blkLimits(HIGH,KAXIS)+K3D
     do j = blkLimits(LOW,JAXIS)-K2D, blkLimits(HIGH,JAXIS)+K2D
        do i = blkLimits(LOW,IAXIS)-1, blkLimits(HIGH,IAXIS)+1
           
           xtemp = solnData(TempToUse,i,j,k)
           xdens = solnData(DENS_VAR,i,j,k)
           
           ! load the mass fractions
           do n = 1, NSPECIES
              massfrac(n) = solnData(SPECIES_BEGIN-1+n,i,j,k)
           enddo
           
           call Conductivity(solnData(:,i,j,k), cond_zone, component=2)             
           
           solnData(COND_VAR,i,j,k) = cond_zone
           
           ! Set abar and zbar:
#ifdef FLASH_MULTISPECIES
           call Eos_getAbarZbar(solnData(:,i,j,k),Ye=Ye,massFrac=massfrac)
#else
#ifdef YE_MSCALAR
           Ye = solnData(YE_MSCALAR,i,j,k)
#else
           Ye = diff_singleSpeciesZ / diff_singleSpeciesA
#endif
#endif           
           ! Set electron flux limiter:
           solnData(FLLM_VAR,i,j,k) = diff_eleFlCoef * &
                sqrt(diff_boltz*xtemp/diff_mele) * &
                diff_boltz*xtemp * &
                (Ye * diff_avo * xdens)
        enddo
     enddo
  enddo
  
  call Diffuse_fluxLimiter(COND_VAR, TempToUse, FLLM_VAR, &
       diff_eleFlMode, 1, (/blockID/))     
  
  call Grid_getDeltas(blockID, del)
  
  datasize(1:MDIM)= blkLimits(HIGH,1:MDIM)-blkLimits(LOW,1:MDIM)+1        
  
  allocate(faceAreas(2*NDIM,                       &
       blkLimits(LOW,IAXIS):blkLimits(HIGH,IAXIS), &
       blkLimits(LOW,JAXIS):blkLimits(HIGH,JAXIS), &
       blkLimits(LOW,KAXIS):blkLimits(HIGH,KAXIS)))              
  
  call Grid_getBlkData(blockID, CELL_FACEAREA, ILO_FACE, EXTERIOR, & 
       blkLimits(LOW,:), faceAreas(ILO_FACE,:,:,:), datasize)     
  
  call Grid_getBlkData(blockID, CELL_FACEAREA, IHI_FACE, EXTERIOR, &
       blkLimits(LOW,:), faceAreas(IHI_FACE,:,:,:), datasize)     
  
#if NDIM >= 2     
  call Grid_getBlkData(blockID, CELL_FACEAREA, JLO_FACE, EXTERIOR, &
       blkLimits(LOW,:), faceAreas(JLO_FACE,:,:,:), datasize)   
  call Grid_getBlkData(blockID, CELL_FACEAREA, JHI_FACE, EXTERIOR, &
       blkLimits(LOW,:), faceAreas(JHI_FACE,:,:,:), datasize)     
#if NDIM == 3
  call Grid_getBlkData(blockID, CELL_FACEAREA, KLO_FACE, EXTERIOR, &
       blkLimits(LOW,:), faceAreas(KLO_FACE,:,:,:), datasize)   
  call Grid_getBlkData(blockID, CELL_FACEAREA, KHI_FACE, EXTERIOR, &
       blkLimits(LOW,:), faceAreas(KHI_FACE,:,:,:), datasize)
#endif
#endif
  
  allocate(cellVolumes(blkLimits(LOW,IAXIS):blkLimits(HIGH,IAXIS), &
       blkLimits(LOW,JAXIS):blkLimits(HIGH,JAXIS), &
       blkLimits(LOW,KAXIS):blkLimits(HIGH,KAXIS)))
  
  call Grid_getBlkData(blockID, CELL_VOLUME, 0, EXTERIOR,          &
       blkLimits(LOW,:), cellVolumes,datasize)
  
  do k = blkLimits(LOW, KAXIS), blkLimits(HIGH, KAXIS)      
     do j = blkLimits(LOW, JAXIS), blkLimits(HIGH, JAXIS)
        do i = blkLimits(LOW, IAXIS), blkLimits(HIGH, IAXIS)                                                     
           
           deltaEINT = 0.0

           sumE = 0.0
           
           condimh = 0.5*(solnData(COND_VAR,i-1,j,k)+ solnData(COND_VAR,i,j,k))*faceAreas(ILO_FACE,i,j,k)
           condiph = 0.5*(solnData(COND_VAR,i,j,k)  + solnData(COND_VAR,i+1,j,k))*faceAreas(IHI_FACE,i,j,k)
           
           deltaEINT = (condiph*(solnData(TempToUse,i+1,j,k)-solnData(TempToUse,i,j,k)) + &
                condimh*(solnData(TempToUse,i-1,j,k)-solnData(TempToUse,i,j,k)))/del(IAXIS)

           sumE = sumE + (solnData(EnerToUse,i-1,j,k) + solnData(EnerToUse,i+1,j,k))
#if NDIM >= 2
           condjmh = 0.5*(solnData(COND_VAR,i,j-1,k)+ solnData(COND_VAR,i,j,k))*faceAreas(JLO_FACE,i,j,k)
           condjph = 0.5*(solnData(COND_VAR,i,j+1,k)+ solnData(COND_VAR,i,j,k))*faceAreas(JHI_FACE,i,j,k)  
           
           deltaEINT = deltaEINT + (condjph*(solnData(TempToUse,i,j+1,k)-solnData(TempToUse,i,j,k)) + &
                condjmh*(solnData(TempToUse,i,j-1,k)-solnData(TempToUse,i,j,k)))/del(JAXIS)
           
           sumE = sumE + (solnData(EnerToUse,i,j-1,k) + solnData(EnerToUse,i+1,j+1,k))
           
#if NDIM == 3
           condkmh = 0.5*(solnData(COND_VAR,i,j,k-1)+ solnData(COND_VAR,i,j,k))*faceAreas(KLO_FACE,i,j,k)
           condkph = 0.5*(solnData(COND_VAR,i,j,k+1)+ solnData(COND_VAR,i,j,k))*faceAreas(KHI_FACE,i,j,k)  
           
           deltaEINT = deltaEINT + (condkph*(solnData(TempToUse,i,j,k+1)-solnData(TempToUse,i,j,k)) + &
                condkmh*(solnData(TempToUse,i,j,k-1)-solnData(TempToUse,i,j,k)))/del(KAXIS)

           sumE = sumE + (solnData(EnerToUse,i,j,k-1) + solnData(EnerToUse,i+1,j,k+1))

#endif             
#endif               
           deltaEINT = abs(deltaEINT)/cellVolumes(i,j,k)
           
           if ((deltaEINT/(solnData(EnerToUse,i,j,k) + 1.0E-3*EINT_MAX)) > energyLogRate) then
              
              energyLogRate = deltaEINT/(solnData(EnerToUse,i,j,k)+1.0E-3*EINT_MAX)             
              
              temploc(1) = i
              temploc(2) = j
              temploc(3) = k
              temploc(4) = blockID
              temploc(5) = diff_meshMe
              
           end if
           
        end do
     end do
  end do
  
  !! Compute new dt based on EnergyLogRate.
  
  if (energyLogRate == 0.0) then
     invEnergyLogRate = HUGE(1.0)
  else
     invEnergyLogRate = 1.0/energyLogRate
  end if
  
  dt_temp = dt_diff_factor*invEnergyLogRate
  
!!$  write (*,'(1p8e14.6)') energyLogRate, solnData(EnerToUse,temploc(1),temploc(2),temploc(3)),  &
!!$       energyLogRate*solnData(EnerToUse,temploc(1),temploc(2),temploc(3))
  
  
  if (dt_temp < dt_check) then
     dt_check = dt_temp
     dt_minloc = temploc
  endif
  
  deallocate (faceAreas)
  deallocate(cellVolumes)
  
  if(dt_check <= 0.0) call Driver_abortFlash("[Diffuse]: computed dt is not positive! Aborting!")
  
  return
  
end subroutine Diffuse_computeDt


