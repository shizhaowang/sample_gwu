!!****if* source/Simulation/SimulationMain/ConductionDeltaSaDiff/Simulation_computeAnalytical
!!
!! NAME
!!
!!  Simulation_computeAnalytical
!!
!!
!! SYNOPSIS
!!
!!  Simulation_computeAnalytical(integer(IN) :: blockID, 
!!                          real(IN) :: tcurr)
!!
!!
!!
!! DESCRIPTION
!!
!!  Initializes fluid data (density, pressure, velocity, etc.) for
!!  a specified block.  This version sets up a linear conduction problem
!!  to test conduction in a medium with constant isochoric conduction coefficient.
!!  The exact three-dimensional solution for the initial condition
!!  
!!                 T (r, t = 0) = Q delta (0)
!!
!!  is 
!!
!!       T (r, t) = Q / (4 pi \chi t)^(3/2) exp [-r^2 / 4 \chi t]
!!
!!  Here we set up the initial condition with the exact solution
!!  slightly offset from t = 0.
!!
!!  Reference: 
!!
!! 
!! ARGUMENTS
!!
!!  blockID -        the number of the block to initialize
!!  tcurr   -        current time
!!
!!
!!***

subroutine Simulation_computeAnalytical(blockId, tcurr)

  use Simulation_data
  use Conductivity_interface, ONLY : Conductivity
  use Eos_interface, ONLY : Eos
  use Grid_interface, ONLY : Grid_getBlkIndexLimits, &
    Grid_getCellCoords, Grid_putPointData
  use Driver_interface, ONLY: Driver_abortFlash

  implicit none

#include "constants.h"
#include "Flash.h"
#include "Eos.h"   

  ! compute the maximum length of a vector in each coordinate direction 
  ! (including guardcells)
  
  integer, intent(in) :: blockId
  real,    intent(in) :: tcurr

  integer :: i, j, k, n
  integer :: iMax, jMax, kMax
  real :: xx, yy, zz, x0, y0, z0, r2, toff, pi
  integer :: ivelx, ively, ivelz

  real,allocatable,dimension(:) :: xCenter,yCenter,zCenter

  integer, dimension(2,MDIM) :: blkLimits, blkLimitsGC
  integer :: sizeX,sizeY,sizeZ,vecLen
  integer, dimension(MDIM) :: axis

  real, dimension(:), allocatable :: eosData
  
  real :: rhoZone, velxZone, velyZone, velzZone, presZone, & 
       enerZone, ekinZone, eintZone, tempZone
  real :: cond_zone, diff_coeff, cond_chi
  real, parameter :: bogusUnusedTemperature = -1e20
  real, save :: bogusUnusedMassFrac(NSPECIES)
  
  logical :: gcell = .true.



  pi = 4. * atan (1.d0)

  ! WE COULD dump some output to stdout listing the parameters.
  ! But currently we don't.
  if (sim_meshMe == MASTER_PE) then

1    format (1X, 1P, 4(A7, E13.7, :, 1X))
2    format (1X, 1P, 2(A7, E13.7, 1X), A7, I13)

  endif


  ! get the coordinate information for the current block from the database
  call Grid_getBlkIndexLimits(blockId,blkLimits,blkLimitsGC)
  sizeX = blkLimitsGC(HIGH,IAXIS)
  sizeY = blkLimitsGC(HIGH,JAXIS)
  sizeZ = blkLimitsGC(HIGH,KAXIS)
  allocate(xCenter(sizeX))
  allocate(yCenter(sizeY))
  allocate(zCenter(sizeZ))
  vecLen = 1
  allocate(eosData(vecLen * EOS_NUM))

  if (NDIM == 3) call Grid_getCellCoords&
                      (KAXIS, blockId, CENTER,gcell, zCenter, sizeZ)
  if (NDIM >= 2) call Grid_getCellCoords&
                      (JAXIS, blockId, CENTER,gcell, yCenter, sizeY)
  call Grid_getCellCoords(IAXIS, blockId, CENTER, gcell, xCenter, sizeX)
!------------------------------------------------------------------------------

! Coordinates of initial point source

  x0 = sim_xCenter
  y0 = sim_yCenter
  z0 = sim_zCenter

! Loop over cells in the block.  For each, compute the physical position of 
!  the state using an exact solution.

  do k = blkLimits(LOW,KAXIS),blkLimits(HIGH,KAXIS)
     
     ! get the coordinates of the cell center in the z-direction
     zz = zCenter(k)

     do j = blkLimits(LOW,JAXIS),blkLimits(HIGH,JAXIS)
        
        ! get the coordinates of the cell center in the y-direction
        yy = yCenter(j)
                
        do i = blkLimits(LOW,IAXIS),blkLimits(HIGH,IAXIS)
           xx  = xCenter(i)

! In planar geometry, set coordinate equal to distance along
!  a cardinal axis

      if (sim_orientation .eq. 1) then
        r2 = (xx - x0) * (xx - x0)

      else if (sim_orientation .eq. 2) then
        r2 = (yy - y0) * (yy - y0)

        else if (sim_orientation .eq. 3) then
          r2 = (zz - z0) * (zz - z0)

! Otherwise, in 3-D spherical geometry, use the 3d radial distance,
        
        else if (sim_orientation .eq. 0) then
          if (NDIM .EQ. 1) then
            call Driver_abortFlash("Conduction point source in 3D and 2D only.")
          else if (NDIM .EQ. 2) then
            r2 = (xx - x0) * (xx - x0) + (yy - y0) * (yy - y0)
          else
            r2 = (xx - x0) * (xx - x0) + (yy - y0) * (yy - y0) + &
                  (zz - z0) * (zz - z0)
          endif

      end if

      call Conductivity(bogusUnusedTemperature, sim_rhoInit, bogusUnusedMassFrac, cond_zone, diff_coeff, 2)
      if (diff_coeff .NE. 0.0) then
         cond_chi = diff_coeff
      else
         cond_chi = 2.0E9 / (3.5 * 8.3145119843E7)
      end if
         

! Now, initialize temperature solution according to the exact solution
!       T (r, t) = Q / (4 pi \chi t)^(3/2) exp [-r^2 / 4 \chi t]
! for a point source in 3D, and
!       T (x, t) = Q / (4 pi \chi t)^(1/2) exp [-x^2 / 4 \chi t]
! for a planar source in any dimension. 
!
! Here \chi is the thermal diffusivity obtained in the Conduction subroutine.
! (In the case of constant conductivity, \chi is computed from the value stored
! in cond_constantIsochoric.)
! The exact solution at t = 0 is a Dirac delta function, so we initialize
!   with some offset in time toff. The gas is initially stationary.

        toff = sim_toffset  + tcurr
        rhoZone = sim_rhoInit
 
        if (sim_orientation .eq. 0) then

! Initialize point source 

          tempZone = sim_Q / (4. * pi * cond_chi * toff)**(3./2.) * &
                     exp (-r2 / (4. * cond_chi * toff) )
        else

! Initialize planar source

          tempZone = sim_Q / (4. * pi * cond_chi * toff)**(1./2.) * &
                     exp (-r2 / (4. * cond_chi * toff) )
        endif
      
      ! Now add this Guassian shape to the temperature background
      tempZone = sim_tempBackground + tempZone

      axis(IAXIS) = i
      axis(JAXIS) = j
      axis(KAXIS) = k
      call Grid_putPointData(blockId, CENTER, TANA_VAR, EXTERIOR, axis, tempZone)



      enddo
      enddo
      enddo
      deallocate(eosData)
      deallocate(xCenter)
      deallocate(yCenter)
      deallocate(zCenter)
     
      return

    end subroutine Simulation_computeAnalytical
