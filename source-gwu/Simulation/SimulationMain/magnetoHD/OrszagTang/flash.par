# 	Runtime parameters for the Orszag-Tang MHD vortex problem.
#	Please also look at default.par for more runtime parameters in the object directory

#	Specific heats ratio
gamma		= 1.66666666666666667


#       Grid dimensionality and geometry
geometry	= "cartesian"


#       Size of computational volume
xmin		= 0.
xmax		= 1.
ymin		= 0.
ymax		= 1.
zmin		= 0.
zmax		= 1.


#       Boundary conditions
xl_boundary_type = "periodic"
xr_boundary_type = "periodic"
yl_boundary_type = "periodic"
yr_boundary_type = "periodic"
zl_boundary_type = "periodic"
zr_boundary_type = "periodic"


#       Simulation (grid, time, I/O) parameters
run_comment	= "2D Orszag-Tang MHD vortex problem"
log_file	= "orszag_mhd_2d.log"
basenm		= "orszag_mhd_2d_"
restart         = .false.
#checkPointFileNumber=1
#plotFileNumber  = 1
#particleFileNumber = 0
nend            = 10000000
tmax            = 0.5 
cfl             = 0.8
plot_var_1	= "dens"

#	Velocity perturbation for 3D
perturbation	= 0.2

convertToConsvdInMeshInterp = .true.
checkpointFileIntervalTime = 0.1
#checkpointFileIntervalStep = 10
#particleFileIntervalTime    = 0.1
#particleFileIntervalStep    = 0	

#       Particles
pt_numX = 5
pt_numY = 5 
pt_numZ = 5 
pt_maxPerProc=1000


#	AMR parameters
#nblockx	= 1
#nblocky	= 1
lrefine_min	= 1
lrefine_max     = 5
nrefs           = 2
refine_var_1    = "dens"
refine_var_2	= "magx"
refine_var_3	= "magy"
eintSwitch	= 1.e-6


#	DivB control switch
killdivb	= .true.

#	Flux Conservation for AMR
flux_correct    = .true.


## -------------------------------------------------------------##
##  SWITCHES SPECIFIC TO THE UNSPLIT STAGGERED MESH MHD SOLVER  ##
#	I. INTERPOLATION SCHEME:
order		= 2       # Data reconstruction order[1st(1st order Godunov),2nd(MUSCL-Hancock),3rd(PPM),5th(WENO)]
slopeLimiter    = "mc"    # Slope limiters (minmod, mc, vanLeer, hybrid, limited)
LimitedSlopeBeta= 1.      # Slope parameter for the "limited" slope by Toro
charLimiting	= .true.  # Characteristic limiting vs. Primitive limiting

use_avisc	= .false. # use artificial viscosity (originally for PPM)
cvisc		= 0.1     # coefficient for artificial viscosity
use_flattening	= .false. # use flattening (dissipative) (originally for PPM)
use_steepening	= .false. # use contact steepening (originally for PPM)
use_upwindTVD	= .false. # use upwind biased TVD slope for PPM (need nguard=6)


#	II. MAGNETIC(B) AND ELECTRIC(E) FIELDS:
E_modification	= .true.           # High order algorithm for E-field construction
energyFix	= .true.           # Update magnetic energy using staggered B-fields
ForceHydroLimit	= .false.          # Pure Hydro Limit (B=0)
prolMethod      = "injection_prol" # Prolongation method (injecton_prol, balsara_prol)


#	III. RIEMANN SOLVERS:
RiemannSolver	= "Roe"       # Roe, HLL, HLLC, HLLD, LLF, Marquina
entropy         = .false.     # Entropy fix for the Roe solver
EOSforRiemann	= .false.     # Call EOS in Riemann flux calculations

#	IV. STRONG SHOCK HANDELING SCHEME:
shockDetect	= .false.     # Shock Detect for numerical stability
## -------------------------------------------------------------##

## ---------------------------------------------------------------##
##  SWITCHES SPECIFIC TO THE SUPER-TIME-STEPPING (STS) ALGORITHM  ##
##  NOTE: For details on using STS runtime parameters, please     ##
##        refer to user's guide (Driver chapter).                 ##
useSTS                  = .false.
nstepTotalSTS           = 5
nuSTS                   = 0.2
## ---------------------------------------------------------------##

#	The parameters below are only necessary for the Uniform Grid
iGridSize	= 200	#defined as nxb * iprocs
jGridSize	= 200	#defined as nyb * jprocs
#kGridSize	= 1	#defined as nzb * kprocs
iProcs		= 2	#number of procs in the i direction
jProcs		= 2	#number of procs in the j direction
kProcs		= 1	#number of procs in the k direction

# When using UG, iProcs, jProcs and kProcs must be specified.
# These are the processors along each of the dimensions
# FIXEDBLOCKSIZE mode ::
#	When using fixed blocksize, iGridSize etc are redundant in
#	runtime parameters. These quantities are calculated as 
#	iGridSize = NXB*iprocs
#	jGridSize = NYB*jprocs
#	kGridSize = NZB*kprocs
# NONFIXEDBLOCKSIZE mode ::
#	iGridSize etc must be specified. They constitute the global
#	number of grid points in the physical domain without taking 
#	the guard cell into account. The local blocksize is calculated
#	as iGridSize/iprocs  etc.
