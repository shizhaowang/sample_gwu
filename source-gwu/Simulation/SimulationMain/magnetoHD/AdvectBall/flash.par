# 	Runtime parameters for the 3D Ball advection problem.
#	Please also look at default.par for more runtime parameters in the object directory

#	Specific heats ratio
gamma           = 1.66666666666666667


#       Grid dimensionality and geometry
geometry       = "cartesian"

#	Size of computational volume for 3D test
xmin           =-0.5
xmax           = 0.5
ymin           =-0.5
ymax           = 0.5
zmin	       =-0.5
zmax	       = 0.5


#	Initial strength of the velocity fields for 3D
Ux_initial	= 1.0 # for an advection run for 3D
Uy_initial	= 1.0 # for an advection run for 3D
Uz_initial	= 1.0 # for an advection run for 3D


#	Radius of the field loop
ballRadius	= 0.15


#       Boundary conditions (code -22 is periodic)
xl_boundary_type = "periodic"
xr_boundary_type = "periodic"
yl_boundary_type = "periodic"
yr_boundary_type = "periodic"
zl_boundary_type = "periodic"
zr_boundary_type = "periodic"


#       Simulation (grid, time, I/O) parameters
run_comment     = "3D Ball Advect MHD problem"
log_file        = "advect3dBall_3d.log"
basenm          = "advect3dBall_3d_"
restart         = .false.
#checkPointFileNumber=1
#plotFileNumber  = 1
nend            = 1000000
tmax            = 2.0
cfl             = 0.8
plot_var_1	= "dens"
plot_var_2	= "pres"
plot_var_3	= "ener"

convertToConsvdInMeshInterp = .true.
checkpointFileIntervalTime = 0.1
#checkpointFileIntervalStep = 10


#	AMR parameters
#nblockx	= 1
#nblocky	= 1
lrefine_min	= 1
lrefine_max     = 6 
nrefs           = 2
refine_var_1	= "dens"
refine_var_2	= "pres"
eintSwitch	= 1.e-6


#	DivB control switch
killdivb	= .true.


#	Flux Conservation for AMR
flux_correct    = .true.

## -------------------------------------------------------------##
##  SWITCHES SPECIFIC TO THE UNSPLIT STAGGERED MESH MHD SOLVER  ##
#	I. INTERPOLATION SCHEME:
order		= 2      # Interpolation order (First/Second order)
slopeLimiter    = "mc"   # Slope limiters (minmod, mc, vanLeer, hybrid, limited)
LimitedSlopeBeta= 1.     # Slope parameter for the "limited" slope by Toro
charLimiting	= .true. # Characteristic limiting vs. Primitive limiting


#	II. MAGNETIC(B) AND ELECTRIC(E) FIELDS:
E_modification	= .true.           # High order algorithm for E-field construction
energyFix	= .true.           # Update magnetic energy using staggered B-fields
ForceHydroLimit	= .false.          # Pure Hydro Limit (B=0)
prolMethod      = "injection_prol" # Prolongation method (injecton_prol, balsara_prol)


#	III. RIEMANN SOLVERS:
RiemannSolver	= "Roe"       # Roe, HLL, HLLC, HLLD, LF
shockInstabilityFix = .false. # Carbuncle instability fix for the Roe solver
entropy         = .false.     # Entropy fix for the Roe solver


#	IV. STRONG SHOCK HANDELING SCHEME:
shockDetect	= .false.     # Shock Detect for numerical stability
## -------------------------------------------------------------##


#	The parameters below are only necessary for the Uniform Grid
iGridSize	= 64	#defined as nxb * iprocs
jGridSize	= 64     #defined as nyb * jprocs
kGridSize	= 64	#defined as nzb * kprocs
iProcs		= 1	#number or procs in the i direction
jProcs		= 2	#number or procs in the j direction
kProcs		= 2	#number or procs in the k direction

# When using UG, iProcs, jProcs and kProcs must be specified.
# These are the processors along each of the dimensions
# FIXEDBLOCKSIZE mode ::
#	When using fixed blocksize, iGridSize etc are redundant in
#	runtime parameters. These quantities are calculated as 
#	iGridSize = NXB*iprocs
#	jGridSize = NYB*jprocs
#	kGridSize = NZB*kprocs
# NONFIXEDBLOCKSIZE mode ::
#	iGridSize etc must be specified. They constitute the global
#	number of grid points in the physical domain without taking 
#	the guard cell into account. The local blocksize is calculated
#	as iGridSize/iprocs  etc.
