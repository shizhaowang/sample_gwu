!!****if* source/physics/materialProperties/Opacity/OpacityMain/Constant/Opacity
!!
!! NAME
!!  Opacity
!!
!! SYNOPSIS
!!  call Opacity(real(in)  :: soln
!!               real(in)  :: ngrp
!!               real(out) :: opacityAbsorption,
!!               real(out) :: opacityEmission,
!!               real(out) :: opacityTransport )
!!
!! DESCRIPTION
!!
!!  Computes absorption, emission and transport opacities for a
!!  particular zone. In this case the opacities are all set to a
!!  constant value defined in the flash.par file.
!!
!! ARGUMENTS
!!
!!   soln : The solution vector for the cell
!!   ngrp : The group number
!!
!!   opacityAbsorption : the absorption opacity (in 1/cm)
!!
!!   opacityEmission   : the emission opacity (in 1/cm)
!!
!!   opacityTransport  : the transport opacity which is used to compute the
!!                       diffusion coefficient (in 1/cm)
!!
!!***
subroutine Opacity(soln, ngrp, opacityAbsorption, opacityEmission, opacityTransport)
  use RadTrans_interface, only: RadTrans_mgdGetBound
  implicit none
  
#include "Flash.h"  
#include "constants.h"
  
  real, intent(in), dimension(:) :: soln
  integer, intent(in) :: ngrp
  real, intent(out) :: opacityAbsorption
  real, intent(out) :: opacityEmission
  real, intent(out) :: opacityTransport
  real :: opac
  real :: eg, egp1, egph

  real, parameter :: K = 1.602e-12
  
  call RadTrans_mgdGetBound(ngrp, eg)
  call RadTrans_mgdGetBound(ngrp+1, egp1)

  ! Convert energy group boundaries to eV:
  eg   = eg   / K
  egp1 = egp1 / K

  ! Compute E_g+1/2 using a geometric mean:
  egph = sqrt(eg*egp1)

  opac = 1.0e+08/egph**3

  opacityAbsorption = opac
  opacityEmission   = opac
  opacityTransport  = opac
  
  return
end subroutine Opacity

