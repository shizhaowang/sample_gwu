!!****if* source/Grid/GridSolvers/HYPRE_KPD/paramesh/gr_hypreCreateMatrix_RelP
!!
!!  NAME 
!!
!!  gr_hypreCreateMatrix
!!
!!  SYNOPSIS
!!
!!  call gr_hypreCreateMatrix (integer, intent(IN)           :: iVar,
!!                             integer, intent(IN)           :: iFactorB,
!!                             integer, intent(IN)           :: iFactorA,
!!                             integer, intent(IN)           :: bcTypes(6),
!!                             real,    intent(IN)           :: bcValues(2,6),
!!                             real,    intent(IN)           :: dt,
!!                             real,    intent(IN)           :: alpha,
!!                             integer,           intent(IN) :: blockCount,
!!                             integer,dimension(blockCount),intent(IN) :: blockList,
!!                             logical, intent(IN)           :: JacobiMatrix
!!                             integer, intent(IN), OPTIONAL :: iFactorC)
!!
!!
!!  DESCRIPTION 
!!      This routine computes two matrices
!!          AX = B, where A is the matrix to be inverted
!!          B = MX, where M is a matrix whose product with iVar produces RHS B.
!!          if present iFactorC is added to the diagnol.
!!
!!      A*(df/dt) + C*f = div(B*grad(f)) + D
!!      f -> Variable to be diffused.
!!      C,D are optional factors.
!!
!!
!! ARGUMENTS
!! 
!!   iVar         : Variable on which the diffusion operatorion is performed (e.g TEMP_VAR)
!!   iFactorB     : Are factors in the equation with spatial variation. Factor C,D are optional 
!!   iFactorA     : and are generally used to represent emission/absorption in MGD.
!!   iFactorC     :
!!   bcTypes      : Presently OUTFLOW, VACUUM is supported, DIRICHLET is untested.
!!   bcValues     : Values of iVar,iFactorB on boundary (DIRICHLET, not used).                        
!!   dt           : The time step.
!!   alpha        : varies scheme (0-> Explicit, 1-> backward euler, 0.5 -> Crank Nicholson
!!   blockCount   : The number of blocks in the list.   
!!   blockList    : The list of blocks on which the solution must be updated.        
!!   JacobiMatrix : TRUE, computes A and FALSE computes M.
!!
!! SIDE EFFECTS
!!
!!  
!! NOTES
!!  
!!
!!***

!!REORDER(4): solnVec

subroutine gr_hypreCreateMatrix(iVar, iFactorB, iFactorA, bcTypes, bcValues, dt, &
     alpha, blockCount, blockList, JacobiMatrix, iFactorC)
  
  use gr_hypreData,     ONLY : gr_hypreSolverType,gr_hypreLower, gr_hypreUpper, &
                               gr_hypreMatA, gr_hypreSetup, &
                               gr_hypreRefineMIN, gr_hypreRefineMAX, gr_hypreNeghLevels, &
                               gr_asol, gr_speedlt , gr_hypreSurrBlkSum
  use Grid_interface, ONLY : Grid_getBlkPtr, Grid_releaseBlkPtr, &
    Grid_getBlkIndexLimits, Grid_fillGuardCells, Grid_getBlkBC, &
    Grid_getBlkCornerID, Grid_getCellCoords, Grid_getFluxData, Grid_getBlkData, Grid_getDeltas, Grid_getBlkRefineLevel
  use Timers_interface, ONLY : Timers_start, Timers_stop 
  use Grid_interface,   ONLY : GRID_PDE_BND_PERIODIC,  &
                               GRID_PDE_BND_NEUMANN,   &
                               GRID_PDE_BND_DIRICHLET
  use Grid_data,        ONLY : gr_geometry, gr_meshMe
  
  
  implicit none
 
#include "Flash.h" 
#include "constants.h"
#include "Flash_mpi.h"
#include "HYPREf.h"    
  
  !!-----------------------------------------------------------------------
  !!         ARGUMENTS
  !!-----------------------------------------------------------------------
  integer, intent(IN) :: iVar
  integer, intent(IN) :: iFactorB
  integer, intent(IN) :: iFactorA
  integer, OPTIONAL, intent(IN) :: iFactorC
  integer, intent(IN) :: bcTypes(6)
  real,    intent(IN) :: bcValues(2,6)
  real,    intent(IN) :: dt
  real,    intent(IN) :: alpha
  integer, intent(IN) :: blockCount
  integer,dimension(blockCount),intent(IN) :: blockList
  logical, intent(IN) :: JacobiMatrix
      
  !!-----------------------------------------------------------------------
  !!         LOCAL VARIABLES.
  !!-----------------------------------------------------------------------  
  integer :: ierr, pos(NDIM)
  real, dimension(MDIM)     :: del , delph, delmh
  real, dimension(2*MDIM, MDIM) :: negh_del
  real :: CDiv 
  real, POINTER, DIMENSION(:,:,:,:) :: solnVec
  integer, dimension(2,MDIM):: blkLimitsGC, blkLimits 
  integer :: datasize(MDIM), datasizeGC(MDIM)
  integer ::  mypart,mylevel
  integer ::  var
  integer :: blockID
  integer ::  nentries,  stencil_indices(7)  
  real    ::  values(7), graph_value(7) 
  integer :: i, j, k, ii, lb
!!$  integer :: left, center, right
  real   :: condiph, condimh
  real   :: condjph, condjmh
  real   :: condkph, condkmh
  real   :: coeff, theta
  integer, dimension(2,MDIM):: faces 
  integer :: eachNegh,numNegh 

  real, allocatable, dimension(:,:,:,:) :: xflux, yflux, zflux
  real :: dirichlet_multiplier
  integer :: dir
  real, allocatable :: faceAreas  (:,:,:,:)  
  character(len=32) :: matfile
  integer :: numGraph, iter
  real, allocatable :: BoxVal(:)
  integer, parameter :: nFluxVars = 2**(NDIM-1)
  
  call Timers_start("gr_hypreCreateMatrix")  
  
  if(JacobiMatrix) then
     theta = alpha
     dirichlet_multiplier = 1.0
  else
     theta = alpha - 1.0
     dirichlet_multiplier = 0.0     
  end if
  
  nentries = 2*NDIM + 1 
  do i = 1, nentries
     stencil_indices(i) = i-1
  enddo
  
  mypart = 0 !! part iterator 
  var    = 0  !! var iterator.  
  
  if (blockCount > 0) then
     call Grid_getBlkIndexLimits(blockList(1),blkLimits,blkLimitsGC)         
     datasize(1:MDIM)=blkLimitsGC(HIGH,1:MDIM)-blkLimitsGC(LOW,1:MDIM)+1          
     allocate(xflux(NFLUXES+1,dataSize(IAXIS),dataSize(JAXIS),dataSize(KAXIS)))
     allocate(yflux(NFLUXES+1,dataSize(IAXIS),dataSize(JAXIS),dataSize(KAXIS)))
     allocate(zflux(NFLUXES+1,dataSize(IAXIS),dataSize(JAXIS),dataSize(KAXIS)))
  else
     datasize = 0.
  end if
  


  if(blockCount == 0) then
     call Timers_start("gr_hypreApplyBcToEdge")     
     call Timers_stop("gr_hypreApplyBcToEdge")     
  end if
  
  do lb = 1, blockCount     
     blockID = blockList(lb)
     call Grid_getBlkIndexLimits(blockID,blkLimits,blkLimitsGC)    
     call Grid_getBlkPtr(blockID, solnVec)
     call Grid_getDeltas(blockID, del)
     call Grid_getBlkBC (blockID, faces)     
     call Grid_getBlkRefineLevel(blockID,mylevel)
     
     datasize  (1:MDIM)= blkLimits  (HIGH,1:MDIM)-blkLimits  (LOW,1:MDIM)+1
     datasizeGC(1:MDIM)= blkLimitsGC(HIGH,1:MDIM)-blkLimitsGC(LOW,1:MDIM)+1
     
     allocate(BoxVal(nentries*product(datasize(1:NDIM))))                
     
     mypart = mylevel - gr_hypreRefineMIN                  
     
     allocate(faceAreas(NDIM, blkLimitsGC(LOW,IAXIS):blkLimitsGC(HIGH,IAXIS),   &
                              blkLimitsGC(LOW,JAXIS):blkLimitsGC(HIGH,JAXIS),   &
                              blkLimitsGC(LOW,KAXIS):blkLimitsGC(HIGH,KAXIS)))               
     
     call Grid_getBlkData(blockID, CELL_FACEAREA, ILO_FACE, EXTERIOR, & 
          blkLimitsGC(LOW,:), faceAreas(IAXIS,:,:,:), datasizeGC)         
     
#if NDIM >= 2
     
     call Grid_getBlkData(blockID, CELL_FACEAREA, JLO_FACE, EXTERIOR, &
          blkLimitsGC(LOW,:), faceAreas(JAXIS,:,:,:), datasizeGC)        
     
#if NDIM == 3
     
     call Grid_getBlkData(blockID, CELL_FACEAREA, KLO_FACE, EXTERIOR, &
          blkLimitsGC(LOW,:), faceAreas(KAXIS,:,:,:), datasizeGC)        

#endif     
#endif          
     
     if (mylevel > gr_hypreNeghLevels(lb,LEFT_EDGE,1+K2D,1+K3D)) then !!F/C
        negh_del(1,:) = del(:)*2.0
     else !! C/F
        negh_del(1,:) = del(:)/2.0
     end if
     
     if (mylevel > gr_hypreNeghLevels(lb,RIGHT_EDGE,1+K2D,1+K3D)) then !!F/C
        negh_del(2,:) = del(:)*2.0
     else !! C/F
        negh_del(2,:) = del(:)/2.0
     end if
     
     if (mylevel > gr_hypreNeghLevels(lb,1+K1D,LEFT_EDGE,1+K3D)) then !!F/C
        negh_del(3,:) = del(:)*2.0
     else !! C/F
        negh_del(3,:) = del(:)/2.0
     end if
     
     if (mylevel > gr_hypreNeghLevels(lb,1+K1D,RIGHT_EDGE,1+K3D)) then !!F/C
        negh_del(4,:) = del(:)*2.0
     else !! C/F
        negh_del(4,:) = del(:)/2.0
     end if
     
     if (mylevel > gr_hypreNeghLevels(lb,1+K1D,1+K2D,LEFT_EDGE)) then !!F/C
        negh_del(5,:) = del(:)*2.0
     else !! C/F
        negh_del(5,:) = del(:)/2.0
     end if
     
     if (mylevel > gr_hypreNeghLevels(lb,1+K1D,1+K2D,RIGHT_EDGE)) then !!F/C
        negh_del(6,:) = del(:)*2.0
     else !! C/F
        negh_del(6,:) = del(:)/2.0
     end if


     call Grid_getFluxData(blockID,IAXIS,xflux,datasizeGC)
#if NDIM >= 2
     call Grid_getFluxData(blockID,JAXIS,yflux,datasizeGC)
#if NDIM == 3
     call Grid_getFluxData(blockID,KAXIS,zflux,datasizeGC)
#endif
#endif     
     
     iter = 1
     
     BoxVal = 0.0
     
     do i = blkLimits(LOW, IAXIS), blkLimits(HIGH, IAXIS)                                   
        do j = blkLimits(LOW, JAXIS), blkLimits(HIGH, JAXIS)
           do k = blkLimits(LOW, KAXIS), blkLimits(HIGH, KAXIS)                    
              
              !!-----------------------------------------------------------------------
              !!         SWAP INDICES FOR FLASH-HYPRE COMPATIABILITY.
              !!-----------------------------------------------------------------------
#if NDIM == 1
              pos(1) = gr_hypreLower(lb,1) + (i-blkLimits(LOW,IAXIS))
#endif
#if NDIM == 2                                 
              pos(1) = gr_hypreLower(lb,1) + (j-blkLimits(LOW,JAXIS))
              pos(2) = gr_hypreLower(lb,2) + (i-blkLimits(LOW,IAXIS))
#endif
#if NDIM ==3
              pos(1) = gr_hypreLower(lb,1) + (k-blkLimits(LOW,KAXIS))
              pos(2) = gr_hypreLower(lb,2) + (j-blkLimits(LOW,JAXIS))
              pos(3) = gr_hypreLower(lb,3) + (i-blkLimits(LOW,IAXIS))
#endif         
              
              !!-----------------------------------------------------------------------
              !!         STENCILED VALUES TO BE FED INTO HYPRE MATRIX.
              !!-----------------------------------------------------------------------
              values = 0.0                           
              
              delmh = del
              delph = del
              
              condimh = 0.
              condiph = 0.
              
              numGraph = 0
              
              !! i-1,j,k
              if ((i /= blkLimits(LOW, IAXIS)) .or. (faces(1,IAXIS) == NOT_BOUNDARY)) then                                         
                 if (i == blkLimits(LOW, IAXIS) .and. mylevel /= gr_hypreNeghLevels(lb,LEFT_EDGE, 1+K2D, 1+K3D)) then  !! F/C boundary.                                         
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(LEFT_EDGE,1+K2D,1+K3D) % numNegh    
                    numGraph = numNegh                    
                    do eachNegh = 1, numNegh                                                            
                       ii = 2*NDIM+1+eachNegh-1                       
                       delmh(IAXIS) =  0.5*(negh_del(1,IAXIS) + del(IAXIS))
                       
                       if (numNegh > 1) then !! we are on coarse cell, use the average computed from fine cell (2 of them)
                          condimh = xflux(eachNegh,i,j,k)
                       else
                          if (NDIM > 1) then
                             !! we are on fine cell and looking at coarse block, use regular averaging.
                             condimh = 0.5*(solnVec(iFactorB,i-1,j,k)+ solnVec(iFactorB,i,j,k))*faceAreas(IAXIS,i,j,k)
                          else
                             condimh = xflux(eachNegh,i,j,k)
                          end if
                       end if
                       
                       graph_value(1) = -condimh*theta*dt/delmh(IAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------


                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    if (numNegh > 1) then
                       condimh = sum(xflux(1:nFluxVars,i,j,k))
                    end if
                 else
                    !! STENCILED RELATIONSHIP.
                    delmh(IAXIS) = del(IAXIS)
                    condimh = 0.5*(solnVec(iFactorB,i-1,j,k)+ solnVec(iFactorB,i,j,k))*faceAreas(IAXIS,i,j,k)
                    BoxVal(iter+1) = -condimh*theta*dt/delmh(IAXIS)

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+1) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              !! i+1,j,k
              if (i /= blkLimits(HIGH, IAXIS) .or. (faces(2,IAXIS) == NOT_BOUNDARY)) then
                 if (i == blkLimits(HIGH, IAXIS) .and. mylevel /= gr_hypreNeghLevels(lb, RIGHT_EDGE, 1+K2D, 1+K3D)) then !! F/C boundary.
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(RIGHT_EDGE, 1+K2D, 1+K3D) % numNegh
                    numGraph = numNegh
                    do eachNegh = 1, numNegh
                       ii= 2*NDIM+1+eachNegh-1
                       delph(IAXIS) =  0.5*(negh_del(2,IAXIS) + del(IAXIS))
                       if (numNegh > 1) then !! we are on coarse cell, use fine cell area on fluxes.
!print*,blockID,"problem",eachNegh,i+1,j,k
                          condiph = xflux(eachNegh,i+1,j,k)
                       else
                          if (NDIM > 1) then
                             condiph = 0.5*(solnVec(iFactorB,i,j,k)  + solnVec(iFactorB,i+1,j,k))*faceAreas(IAXIS,i+1,j,k)
                          else
                             condiph = xflux(eachNegh,i+1,j,k)
                          end if
                       end if
                       graph_value(1) =  -condiph*theta*dt/delph(IAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------

                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    if (numNegh > 1) then
                       condiph = sum(xflux(1:nFluxVars,i+1,j,k)) !! actual flux, goes towards computing diag.
                    end if
                 else
                    !! STENCILED RELATIONSHIP.
                    delph(IAXIS) =  del(IAXIS)
                    condiph = 0.5*(solnVec(iFactorB,i,j,k)  + solnVec(iFactorB,i+1,j,k))*faceAreas(IAXIS,i+1,j,k)
                    BoxVal(iter+2) =  -condiph*theta*dt/(delph(1))

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+2) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              BoxVal(iter) = BoxVal(iter) + theta*((Condimh/delmh(1))+(Condiph/delph(1)))*dt

#if NDIM >= 2
              condjmh = 0.
              condjph = 0.

              !! i,j-1,k
              if ((j /= blkLimits(LOW, JAXIS)) .or. (faces(1,JAXIS) == NOT_BOUNDARY)) then
                 if (j == blkLimits(LOW, JAXIS) .and. mylevel /= gr_hypreNeghLevels(lb,1+K1D,LEFT_EDGE,1+K3D)) then  !! F/C boundary.
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(1+K1D,LEFT_EDGE,1+K3D) % numNegh
                    do eachNegh = 1, numNegh
                       delmh(JAXIS) =  0.5*(negh_del(3,JAXIS) + del(JAXIS))
                       ii=2*NDIM+1+eachNegh-1+numGraph
                       if (numNegh > 1) then !! we are on coarse cell, use fine cell area on fluxes.
                          condjmh = yflux(eachNegh,i,j,k)
                       else
                          condjmh = 0.5*(solnVec(iFactorB,i,j-1,k)+ solnVec(iFactorB,i,j,k))*faceAreas(JAXIS,i,j,k)
                       end if
                       graph_value(1) = -condjmh*theta*dt/delmh(JAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------

                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    numGraph = numGraph + numNegh

                    if (numNegh > 1) then
                       condjmh = sum(yflux(1:nFluxVars,i,j,k))
                    end if

                 else
                    !! STENCILED RELATIONSHIP.
                    delmh(JAXIS) = del(JAXIS)
                    condjmh = 0.5*(solnVec(iFactorB,i,j-1,k)+ solnVec(iFactorB,i,j,k))*faceAreas(JAXIS,i,j,k)
                    BoxVal(iter+3) = -condjmh*theta*dt/(delmh(JAXIS))

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+3) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              !! i,j+1,k
              if ((j /= blkLimits(HIGH, JAXIS)) .or. (faces(2,JAXIS) == NOT_BOUNDARY)) then
                 if (j ==  blkLimits(HIGH, JAXIS) .and. mylevel /= gr_hypreNeghLevels(lb,1+K1D,RIGHT_EDGE,1+K3D)) then !! F/C boundary.
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(1+K1D,RIGHT_EDGE,1+K3D) % numNegh
                    do eachNegh = 1, numNegh
                       delph(JAXIS) =  0.5*(negh_del(4,JAXIS) + del(JAXIS))
                       ii=2*NDIM+1+eachNegh-1+numGraph
                       if (numNegh > 1) then !! we are on coarse cell, use fine cell area on fluxes.
                          condjph = yflux(eachNegh,i,j+1,k)
                       else
                          condjph = 0.5*(solnVec(iFactorB,i,j+1,k)+ solnVec(iFactorB,i,j,k))*faceAreas(JAXIS,i,j+1,k)
                       end if
                       graph_value(1) = -condjph*theta*dt/delph(JAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------

                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    numGraph = numGraph + numNegh

                    if (numNegh > 1) then
                       condjph = sum(yflux(1:nFluxVars,i,j+1,k))
                    end if
                 else
                    !! STENCILED RELATIONSHIP.
                    delph(JAXIS) = del(JAXIS)
                    condjph = 0.5*(solnVec(iFactorB,i,j+1,k)+ solnVec(iFactorB,i,j,k))*faceAreas(JAXIS,i,j+1,k)
                    BoxVal(iter+4) = -condjph*theta*dt/(delph(JAXIS))

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+4) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              BoxVal(iter) = BoxVal(iter) +  theta*(Condjmh/delmh(2)+Condjph/delph(2))*dt !! diag

#if NDIM == 3
              condkmh = 0.
              condkph = 0.
              !! i,j,k-1
              if ((k /= blkLimits(LOW, KAXIS)) .or. (faces(1,KAXIS) == NOT_BOUNDARY)) then
                 if (k == blkLimits(LOW, KAXIS) .and. mylevel /= gr_hypreNeghLevels(lb,1+K1D,1+K2D,LEFT_EDGE)) then  !! F/C boundary.
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(1+K1D,1+K2D,LEFT_EDGE) % numNegh
                    do eachNegh = 1, numNegh
                       delmh(KAXIS) =  0.5*(negh_del(5,KAXIS) + del(KAXIS))
                       ii=2*NDIM+1+eachNegh-1+numGraph
                       if (numNegh > 1) then !! we are on coarse cell, use fine cell area on fluxes.
                          condkmh = zflux(eachNegh,i,j,k)
                       else
                          condkmh = 0.5*(solnVec(iFactorB,i,j,k-1)+ solnVec(iFactorB,i,j,k))*faceAreas(KAXIS,i,j,k)
                       end if
                       graph_value(1) = -condkmh*theta*dt/delmh(KAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------

                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    numGraph = numGraph + numNegh

                    if (numNegh > 1) then
                       condkmh = sum(zflux(1:nFluxVars,i,j,k))
                    end if

                 else
                    !! STENCILED RELATIONSHIP.
                    delmh(KAXIS) = del(KAXIS)
                    condkmh = 0.5*(solnVec(iFactorB,i,j,k-1)+ solnVec(iFactorB,i,j,k))*faceAreas(KAXIS,i,j,k)
                    BoxVal(iter+5) = -condkmh*theta*dt/(delmh(KAXIS))

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+5) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              !! i,j,k+1
              if ((k /= blkLimits(HIGH,KAXIS)) .or. (faces(2,KAXIS) == NOT_BOUNDARY)) then
                 if (k ==  blkLimits(HIGH,KAXIS) .and. mylevel /= gr_hypreNeghLevels(lb,1+K1D,1+K2D,RIGHT_EDGE)) then !! F/C boundary.
                    numNegh = gr_hypreSurrBlkSum(lb) % regionInfo(1+K1D,1+K2D,RIGHT_EDGE) % numNegh
                    do eachNegh = 1, numNegh
                       delph(KAXIS) =  0.5*(negh_del(6,KAXIS) + del(KAXIS))
                       ii=2*NDIM+1+eachNegh-1+numGraph
                       if (numNegh > 1) then !! we are on coarse cell, use fine cell area on fluxes.
                          condkph = zflux(eachNegh,i,j,k+1)
                       else
                          condkph = 0.5*(solnVec(iFactorB,i,j,k+1)+ solnVec(iFactorB,i,j,k))*faceAreas(KAXIS,i,j,k+1)
                       end if
                       graph_value(1) = -condkph*theta*dt/delph(KAXIS)

                       !- kpd - Normalize the pressure field-------------------
                       if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                           i .eq. blkLimits(LOW, IAXIS) .AND. &
                                           j .eq. blkLimits(LOW, JAXIS) .AND. &
                                           k .eq. blkLimits(LOW, KAXIS)) then
                          graph_value(1) = 0.0
                       end if
                       !-------------------------------------------------------

                       call HYPRE_SStructMatrixSetValues(gr_hypreMatA, mypart, pos(1:NDIM), var, 1, ii, graph_value,ierr)
                    end do

                    numGraph = numGraph + numNegh

                    if (numNegh > 1) then
                       condkph = sum(zflux(1:nFluxVars,i,j,k+1))
                    end if
                 else
                    !! STENCILED RELATIONSHIP.
                    delph(KAXIS) = del(KAXIS)
                    condkph = 0.5*(solnVec(iFactorB,i,j,k+1)+ solnVec(iFactorB,i,j,k))*faceAreas(KAXIS,i,j,k+1)
                    BoxVal(iter+6) = -condkph*theta*dt/(delph(KAXIS))

                    !- kpd - Normalize the pressure field-------------------
                    if (lb .eq. 1 .AND. gr_meshMe .eq. 0 .AND.             &
                                        i .eq. blkLimits(LOW, IAXIS) .AND. &
                                        j .eq. blkLimits(LOW, JAXIS) .AND. &
                                        k .eq. blkLimits(LOW, KAXIS)) then
                       BoxVal(iter+6) = 0.0
                    end if
                    !-------------------------------------------------------

                 end if
              end if

              BoxVal(iter) = BoxVal(iter) +  theta*(Condkmh/delmh(KAXIS)+Condkph/delph(KAXIS))*dt !! diag
#endif
#endif
              iter = iter + nentries

           end do
        end do
     end do

     call HYPRE_SStructMatrixSetBoxValues(gr_hypreMatA, mypart, gr_hypreLower(lb,1:NDIM), &
          gr_hypreUpper(lb,1:NDIM), var, nentries, stencil_indices(1:nentries), BoxVal(:), ierr)


     call Timers_start("gr_hypreApplyBcToEdge")
     dir = ILO_FACE
     do i = IAXIS, NDIM
        do j = LOW, HIGH
           if (faces(j,i) /= NOT_BOUNDARY) then
              call gr_hypreApplyBcToFace(blkLimits,blkLimitsGC,mypart,var,iFactorB,bcTypes(dir),dir, &
                   bcValues(:,dir), dt, theta, del(i), gr_hypreLower(lb,:), dirichlet_multiplier, faceAreas(i,:,:,:), solnVec)
           end if
           dir = dir + 1
        end do
     end do
     call Timers_stop("gr_hypreApplyBcToEdge")

     call Grid_releaseBlkPtr(blockID, solnVec)
     deallocate (faceAreas)
     deallocate (BoxVal)

  end do !! block

  !!-----------------------------------------------------------------------
 !!         THIS IS A GLOBAL CALL.
 !!-----------------------------------------------------------------------
 call HYPRE_SStructMatrixAssemble(gr_hypreMatA, ierr)

 if (blockCount > 0) then
    deallocate (xflux)
    deallocate (yflux)
    deallocate (zflux)
 end if

 call Timers_stop("gr_hypreCreateMatrix")

 return

end subroutine gr_hypreCreateMatrix
