!!****if* source/Grid/GridBoundaryConditions/Flash3HSE/Grid_bcApplyToRegionSpecialized
!!
!!
!! NAME
!!  Grid_bcApplyToRegionSpecialized
!!
!! SYNOPSIS
!!
!!  call Grid_bcApplyToRegionSpecialized(integer(IN)  :: bcType,
!!                                 integer(IN)  :: gridDataStruct,
!!                                 integer(IN)  :: guard,
!!                                 integer(IN)  :: axis,
!!                                 integer(IN)  :: face,
!!                                 real(INOUT)  :: regionData(:,:,:,:),
!!                                 integer(IN)  :: regionSize(:),
!!                                 logical(IN)  :: mask(:),
!!                                       logical(OUT) :: applied,
!!                                       integer(IN)  :: blockHandle,
!!                                       integer(IN)  :: secondDir,
!!                                       integer(IN)  :: thirdDir,
!!                                       integer(IN)  :: endPoints(LOW:HIGH,MDIM),
!!                                       integer(IN)  :: blkLimitsGC(LOW:HIGH,MDIM),
!!                              OPTIONAL,integer(IN)  :: idest )
!!
!!                    
!!  
!! DESCRIPTION 
!!  
!!  Applies the boundary conditions to the specified data structure.
!!  The routine is handed a region that has been extracted from the
!!  data structure, on which it should apply the boundary conditions. 
!!  The direction along which the BC are to be applied is always the first
!!  dimension in the given region, and the last dimension contains the
!!  the variables in the data structure. The middle two dimension contain
!!  the size of the region along the two dimensions of the physical grid
!!  that are not having the BC applied.
!!
!!  This routine applies the boundary conditions on a given face (lowerface
!!  or upperface) along a given axis, by using and setting values
!!  for all variables in the gridDataStruct that are not masked out. The 
!!  argument "mask" has the information about the masked variables.
!! 
!!     If (face=LOW)  
!!       regionData(1:guard,:,:,masked(variables) =  boundary values
!!     If (face=HIGH) 
!!       regionData(regionSize(BC_DIR)-guard+1:regionSize(BC_DIR),:,:,masked(variables) =  boundary values
!!
!!
!!   This interface serves two purposes. One it provides a mechanism by which users can
!!   supply their own custom boundary conditions, and two it allows FLASH to implement
!!   more complex boundary conditions such as those with hydrostatic equilibrium in
!!   isolation from the machinery of setting up the region etc. This interface used to
!!   have extra arguments over Grid_bcApplyToRegion, but now both interfaced have been
!!   harmonized.
!!   This routine is always called first when handling boundary conditions, and if it
!!   finds a match with one of bcTypes that it implements, it sets "applied" to .true., otherwise
!!   "applies" is set to .false. If applied is false, then Grid_bcApplyToRegion is called, and
!!   that is the only routine out of these two that traps the error if none of the boundary
!!   types are matched in either routine.
!!
!! ARGUMENTS 
!!
!!  bcType - the type of boundary conditions being applied
!!  gridDataStruct - the Grid dataStructure
!!  guard -    number of guardcells 
!!  axis  - the dimension along which to apply boundary conditions,
!!          can take values of IAXIS, JAXIS and KAXIS
!!  face    -  can take values LOW and HIGH, defined in constants.h
!!             to indicate whether to apply boundary on lowerface or 
!!             upperface
!!  regionData         : the extracted region from a block of permanent storage of the 
!!                   specified data structure. Its size is given by regionSize
!!  regionSize     : regionSize(BC_DIR) contains the size of the each row and
!!                   regionSize(SECOND_DIR) contains the number of along the second
!!                   direction, and regionSize(THIRD_DIR) has the number of rows
!!                   along the third direction. regionSize(GRID_DATASTRUCT) contains the
!!                   number of variables in the data structure
!!  mask - if present applies boundary conditions to only selected variables
!!  applied - is set true if this routine has handled the given bcType, otherwise it is 
!!            set to false.
!!
!!  blockHandle - Handle for the block for which guardcells are to be filled.
!!              In grid implementations other than Paramesh 4, this is always
!!              a local blockID.
!!
!!              With Paramesh 4:
!!              This may be a block actually residing on the local processor,
!!              or the handle may refer to a block that belong to a remote processor
!!              but for which cached information is currently available locally.
!!              The two cases can be distinguished by checking whether 
!!              (blockHandle .LE. lnblocks): this is true only for blocks that
!!              reside on the executing processor.
!!              The block ID is available for passing on to some handlers for 
!!              boundary conditions that may need it, ignored in the default 
!!              implementation.
!!
!!  secondDir,thirdDir -   Second and third coordinate directions.
!!                         These are the transverse directions perpendicular to
!!                         the sweep direction.
!!                         This is not needed for simple boundary condition types
!!                         such as REFLECTIVE or OUTFLOW, It is provided for
!!                         convenience so that more complex boundary condition
!!                         can make use of it.
!!                         The values are currently fully determined by the sweep
!!                         direction bcDir as follows:
!!                          bcDir   |    secondDir       thirdDir
!!                          ------------------------------------------
!!                          IAXIS   |    JAXIS             KAXIS
!!                          JAXIS   |    IAXIS             KAXIS
!!                          KAXIS   |    IAXIS             JAXIS
!!
!!  endPoints - starting and endpoints of the region of interest.
!!              See also NOTE (1) below.
!!
!!  blkLimitsGC - the starting and endpoint of the whole block including
!!                the guard cells, as returned by Grid_getBlkIndexLimits.
!!              See also NOTE (1) below.
!!
!!  idest - Only meaningful with PARAMESH 3 or later.  The argument indicates which slot
!!          in its one-block storage space buffers ("data_1blk.fh") PARAMESH is in the
!!          process of filling.
!!          The following applies when guard cells are filled as part of regular
!!          Grid_fillGuardCells processing (or, in NO_PERMANENT_GUARDCELLS mode,
!!          in order to satisfy a Grid_getBlkPtr request): The value is 1 if guard cells
!!          are being filled in the buffer slot in UNK1 and/or FACEVAR{X,Y,Z}1 or WORK1
!!          that will end up being copied to permanent block data storage (UNK and/or
!!          FACEVAR{X,Y,Z} or WORK, respectively) and/or returned to the user.
!!          The value is 2 if guard cells are being filled in the alternate slot in
!!          the course of assembling data to serve as input for coarse-to-fine
!!          interpolation.
!!          When guard cells are being filled in order to provide input data for
!!          coarse-to-fine interpolation as part of amr_prolong processing (which
!!          is what happens when Grid_updateRefinement is called for an AMR Grid),
!!          the value is always 1.
!!
!!          In other words, you nearly always want to ignore this optional
!!          argument.  As of FLASH 3.0, it is only used internally within the
!!          Grid unit and is handled by the GridBoundaryConditions/Grid_bcApplyToRegion
!!          implementation. The argument has been added to the
!!          Grid_bcApplyToRegionSpecialized interface for consistency with
!!          Grid_bcApplyToRegion.
!!
!!  NOTES 
!!
!!            This routine is common to all the mesh packages supported
!!            The mesh packages extract the small vectors relevant to
!!            boundary conditions calculations from their Grid data 
!!            structures. 
!!            
!!
!!***


subroutine Grid_bcApplyToRegionSpecialized(bcType,gridDataStruct,&
     guard,axis,face,regionData,regionSize,mask,applied,&
     blockHandle,secondDir,thirdDir,endPoints,blkLimitsGC, idest)

#include "constants.h"
#include "Flash.h"
#include "Eos.h"

  use Grid_data, ONLY :gr_myPE,gr_domainBC
  use Driver_interface, ONLY : Driver_abortFlash
  use gr_bcInterface, ONLY : gr_hseStep
  use gr_bcHseData, ONLY : gr_bcHseDirection, gr_bcHseGravConst, HSE_FORWARD, HSE_BACKWARD, HSE_SETTEMP
  use Eos_interface, ONLY : Eos

  implicit none

  integer, intent(IN) :: bcType,axis,face,guard,gridDataStruct
  integer,dimension(REGION_DIM),intent(IN) :: regionSize
  real,dimension(regionSize(BC_DIR),&
       regionSize(SECOND_DIR),&
       regionSize(THIRD_DIR),&
       regionSize(STRUCTSIZE)),intent(INOUT)::regionData
  logical,intent(IN),dimension(regionSize(STRUCTSIZE)):: mask
  logical, intent(OUT) :: applied
  integer,intent(IN) :: blockHandle
  integer,intent(IN) :: secondDir,thirdDir
  integer,intent(IN),dimension(LOW:HIGH,MDIM) :: endPoints, blkLimitsGC
  integer,intent(IN),OPTIONAL:: idest

  integer :: i,j,k, sizeGC, start, end, step, direction
  integer :: velVarBcDir, velVarSecondDir, velVarThirdDir
  real, allocatable, dimension(:) :: cellCenterCoord
  real    :: deltax
  real, dimension(EOS_NUM) :: eosData


!=====================================================================

  select case (axis)
  case(IAXIS)
     velVarBcDir =     VELX_VAR
     velVarSecondDir = VELY_VAR
     velVarThirdDir =  VELZ_VAR
  case(JAXIS)
     velVarBcDir =     VELY_VAR
     velVarSecondDir = VELX_VAR
     velVarThirdDir =  VELZ_VAR
  case(KAXIS)
     velVarBcDir =     VELZ_VAR
     velVarSecondDir = VELX_VAR
     velVarThirdDir =  VELY_VAR
  end select

  ! we are going to assume that gravity is along the IAXIS direction
  ! apply our hydrostatic in both directions

  if (gr_bcHseDirection == IAXIS) then
     if (axis/=IAXIS) then
        applied = .false.
        return
     endif
     applied = .true.

  elseif (gr_bcHseDirection == JAXIS) then
     if (axis/=JAXIS) then
        applied = .false.
        return
     endif
     applied = .true.
  endif

  ! get coordinates
  sizeGC = blkLimitsGC(HIGH,axis)
  allocate(cellCenterCoord(sizeGC))
  call gr_extendedGetCellCoords(axis, blockHandle, gr_myPE, CENTER, .true., cellCenterCoord, sizeGC)
  ! assume this is uniform
  deltax = cellCenterCoord(2)-cellCenterCoord(1)
  deallocate(cellCenterCoord)

  do k = 1, regionSize(THIRD_DIR)
     do j = 1, regionSize(SECOND_DIR)

        !-------------------
        !  first take care of the velocities
        if (face==HIGH) then
           do i = 1,guard
              ! zero-gradient everything (cannot know what the user has defined that needs to be propagated)
              regionData(regionSize(BC_DIR)-guard+i,j,k,:) = regionData(regionSize(BC_DIR)-guard,j,k,:)
              if (bcType == HYDROSTATIC_NVREFL) then
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarBcDir) = -regionData(regionSize(BC_DIR)-guard+1-i,j,k,velVarBcDir)
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarSecondDir) =  regionData(regionSize(BC_DIR)-guard+1-i,j,k,velVarSecondDir)
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarThirdDir) = regionData(regionSize(BC_DIR)-guard+1-i,j,k,velVarThirdDir)
              else if (bcType == HYDROSTATIC_NVOUT) then
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarBcDir) = regionData(regionSize(BC_DIR)-guard,j,k,velVarBcDir)
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarSecondDir) = regionData(regionSize(BC_DIR)-guard,j,k,velVarSecondDir)
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarThirdDir) = regionData(regionSize(BC_DIR)-guard,j,k,velVarThirdDir)
              else if (bcType == HYDROSTATIC_NVDIODE) then
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarBcDir) = max(0.0,regionData(regionSize(BC_DIR)-guard,j,k,velVarBcDir))
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarSecondDir) = regionData(regionSize(BC_DIR)-guard,j,k,velVarSecondDir)
                 regionData(regionSize(BC_DIR)-guard+i,j,k,velVarThirdDir) = regionData(regionSize(BC_DIR)-guard,j,k,velVarThirdDir)
              endif
          enddo
        else if (face==LOW) then
           do i = 1,guard
              ! zero-gradient everything (cannot know what the user has defined that needs to be propagated)
              regionData(i,j,k,:)     = regionData(guard+1,j,k,:)
              if (bcType == HYDROSTATIC_NVREFL) then
                 regionData(i,j,k,velVarBcDir) = -regionData(2*guard+1-i,j,k,velVarBcDir)
                 regionData(i,j,k,velVarSecondDir) =  regionData(2*guard+1-i,j,k,velVarSecondDir)
                 regionData(i,j,k,velVarThirdDir) =  regionData(2*guard+1-i,j,k,velVarThirdDir)
              else if (bcType == HYDROSTATIC_NVOUT) then
                 regionData(i,j,k,velVarBcDir) = regionData(guard+1,j,k,velVarBcDir)
                 regionData(i,j,k,velVarSecondDir) = regionData(guard+1,j,k,velVarSecondDir)
                 regionData(i,j,k,velVarThirdDir) = regionData(guard+1,j,k,velVarThirdDir)
              else if (bcType == HYDROSTATIC_NVDIODE) then
                 regionData(i,j,k,velVarBcDir) = min(0.0,regionData(guard+1,j,k,velVarBcDir))
                 regionData(i,j,k,velVarSecondDir) = regionData(guard+1,j,k,velVarSecondDir)
                 regionData(i,j,k,velVarThirdDir) = regionData(guard+1,j,k,velVarThirdDir)
              endif
          enddo
        endif
       
        if (face==HIGH) then
           ! fill stuff out
           start = regionSize(BC_DIR)-guard+1
           end   = regionSize(BC_DIR)
           step  = 1
           direction = HSE_FORWARD
        else
           start = guard
           end   = 1
           step  = -1
           direction = HSE_BACKWARD
        endif
        do i = start, end, step
           ! density guess value
           regionData(i,j,k,DENS_VAR) = regionData(i-step,j,k,DENS_VAR)
           call gr_hseStep(regionData(:,j,k,DENS_VAR), &
                             regionData(:,j,k,TEMP_VAR), &
                             regionData(:,j,k,YE_MSCALAR),   &
                             regionData(:,j,k,SUMY_MSCALAR), &
                             i,gr_bcHseGravConst, deltax, direction,2, HSE_SETTEMP)
      
           ! now get all the eos stuff and fill it in
           eosData(EOS_DENS) = regionData(i,j,k,DENS_VAR)
           eosData(EOS_TEMP) = regionData(i,j,k,TEMP_VAR)
           eosData(EOS_ABAR) = 1.0/regionData(i,j,k,SUMY_MSCALAR)
           eosData(EOS_ZBAR) = regionData(i,j,k,YE_MSCALAR)*eosData(EOS_ABAR)
           call Eos(MODE_DENS_TEMP, 1, eosData)
           regionData(i,j,k,PRES_VAR) = eosData(EOS_PRES)
           regionData(i,j,k,EINT_VAR) = eosData(EOS_EINT)
           regionData(i,j,k,GAME_VAR) = eosData(EOS_PRES)/(eosData(EOS_EINT)*eosData(EOS_DENS)) +1.0
           regionData(i,j,k,GAMC_VAR) = eosData(EOS_GAMC)

!!$           region(i,j,k,ENER_VAR) = eosData(EOS_EINT) + region(i,j,k,VELX_VAR)**2 &
!!$                                      + region(i,j,k,VELY_VAR)**2 + region(i,j,k,VELZ_VAR)**2

           ! Dongwook: put 1/2 factor for energy
           regionData(i,j,k,ENER_VAR) = eosData(EOS_EINT) + 0.5*(regionData(i,j,k,VELX_VAR)**2 &
                                      + regionData(i,j,k,VELY_VAR)**2 + regionData(i,j,k,VELZ_VAR)**2)

        enddo

     enddo ! second coord
  enddo ! third coord

  return
end subroutine Grid_bcApplyToRegionSpecialized
