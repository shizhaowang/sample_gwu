!!****if* source/Grid/GridMain/Samrai/Grid_getRowData
!!
!!
!! NAME
!!  Grid_getRowData
!!
!! SYNOPSIS
!!
!!  Grid_getRowData(integer(IN) :: blockID,
!!                  integer(IN) :: cellType,
!!                  integer(IN) :: variable,
!!                  integer(IN) :: beginCount, 
!!                  integer(IN) :: row,
!!                  integer(IN) :: startingPos(MDIM),
!!                  real(OUT)   :: datablock(dataSize),
!!                  integer(IN) :: dataSize)
!!  
!! DESCRIPTION 
!!  
!!  Gets a row of simulation data for a single variable and specified cells.
!!  
!!  This routine allows the user to get an entire row or any contiguous
!!  part of a row of data depending on the arguments passed. The user is also
!!  allowed to specify if indice counting should begin at the exterior edge
!!  of the block, (that is including guardcells)
!!  or the interior edge of the block. 
!!
!!  
!! ARGUMENTS 
!!
!!  blockid : the local blockid
!!
!!
!!  cellType : integer value specifying the type of cell data.  The options are
!!             CENTER, FACEX, FACEY, FACEZ defined in constants.h indicated
!!             whether the data is cell centered of face data. 
!!
!!  variable : integer value that specifies which variable to get into storage.
!!             ex: DENS_VAR, PRES_VAR as defined in Flash.h 
!!
!!  
!!
!!  beginCount : tells the routine where to start index counting.  beginCount can
!!               be set to INTERIOR or EXTERIOR.  If INTERIOR is specified
!!               guardcell indices are not included and index 1 is the first interior cell. 
!!               If EXTERIOR is specified
!!               the first index, 1, is the left most guardcell.  See example
!!               below for more explanation.  (For most of the FLASH architecture code,
!!               we use EXTERIOR.  Some physics routines, however, find it helpful 
!!               only to work on the internal parts of the blocks (without
!!               guardcells) and wish to keep loop indicies  
!!               going from 1 to NXB without having to worry about finding 
!!               the correct offset for the number of guardcells.) 
!!               (INTERIOR and EXTERIOR are defined in constants.h)
!!
!!  row :      specifies the integer index coordinates of the cells
!!             The options are IAXIS, JAXIS or KAXIS defined in constants.h
!!
!!  startingPos(MDIM):
!!           specifies the starting position in each dimension of row
!!           row of data being fetched.
!!   
!!           startingPos(1) = i
!!           startingPos(2) = j
!!           startingPos(3) = k
!!
!!           For a 2d problem startingPos(3) is ignored
!!           For a 1d problem startingPos(3) and startingPos(2) are ignored
!!
!!
!!  datablock : a real array containing the data
!!              The dimensions for datablock are 
!!              datablock(blkLimits) Various compilers require the dimensions of
!!              datablock to be specified explicitly.  They are defined by 
!!              the next argument "dataSize".  
!!
!!
!!  dataSize : an integer specifying the dimensions for datablock
!!          
!!          dataSize holds the number of cells in the row to return
!!          
!!
!! EXAMPLE  
!!  
!!    Here is a 3d block example for getting an entire row of data, 
!!    including guardcells for each block on a local processor.  
!!    We will get the entire row in the 
!!    i direction at position j=5 and k=7.  beginCount is set to EXTERIOR
!!    meaning that the first cell of the block including guardcells is 
!!    index = 1.  If in this example, NGUARD = 4 then position 5 is the
!!    first interior cell in a dimension.
!! 
!!    (Can't really draw 3d for this example, but this
!!     picture is meant to help show where 
!!     counting begins when "beginCount" is set to EXTERIOR)
!!    
!!     j
!!    
!!    16         - - - - - - - -  
!!    15         - - - - - - - - 
!!    14         - - - - - - - - 
!!    13         - - - - - - - - 
!!    12 - - - -|-|-|-|-|-|-|-|-|- - - -
!!    11 - - - -|-|-|-|-|-|-|-|-|- - - -
!!    10 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     9 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     8 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     7 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     6 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     5 - - - -|-|-|-|-|-|-|-|-|- - - -
!!     4         - - - - - - - - 
!!     3         - - - - - - - - 
!!     2         - - - - - - - - 
!!     1         - - - - - - - - 
!! i     1 2 3 4 5 6 7 8 9 10111213141516 
!! 
!!    #include "Flash.h"
!!    #include "constants.h"
!!
!!    ...
!!       
!!      integer ::    startingPos(MDIM)
!!      integer ::    dataSize
!!      integer ::    blockID
!!      real    ::    dataBlock(:)
!!       
!!          startingPos(1) = 1    
!!          startingPos(2) = 5
!!          startingPos(3) = 7
!!
!!          dataSize = GRID_IHI_GC !This is equivalent to NXB + 2*NGUARD
!!
!!          allocate(datablock(dataSize))
!!
!!          do blockID = 1, localNumBlocks
!!  
!!             call Grid_getRowData(blockID, CENTER, DENS_VAR, IAXIS, EXTERIOR, &
!!                               startingPos, dataBlock, dataSize)
!!  
!!          end do
!!
!!
!!  
!!    In this 2d block example we will get part of a row for the pressure variable
!!    for each block on a local processor.
!!    beginCount is set to INTERIOR, meaning that all the startPos indices
!!    will start where index 1 is the first interior cell of the block.
!!    In this example we will get just 3 cells in a row in the i direction
!!    beginning at position i= 4 and j position= 5
!!
!!    (hard to draw, but this is the idea, stars (*) are the cells to return
!!     notice the where indice counting starts when beginCount is set to INTERIOR)
!!            - - - - - - - - 
!!            - - - - - - - - 
!!            - - - - - - - - 
!!     j      - - - - - - - - 
!!     8 ----|-|-|-|-|-|-|-|-|----
!!     7 ----|-|-|-|-|-|-|-|-|----
!!     6 ----|-|-|-|-|-|-|-|-|----
!!     5 ----|-|-|-|-|-|-|-|-|----
!!     4 ----|-|-|-|*|*|*|-|-|----
!!     3 ----|-|-|-|-|-|-|-|-|----
!!     2 ----|-|-|-|-|-|-|-|-|----
!!     1 ----|-|-|-|-|-|-|-|-|----
!!            - - - - - - - - 
!!            - - - - - - - - 
!!            - - - - - - - - 
!!            - - - - - - - - 
!!         i  1-2-3-4 5-6-7-8 
!!
!!
!! 
!!    #include "Flash.h"
!!    #include "constants.h"
!!
!!    ...
!!       
!!      integer ::    startingPos(MDIM)
!!      integer ::    dataSize
!!      integer ::    blockID
!!      real    ::    dataBlock(:)
!!       
!!          startingPos(1) = 4    
!!          startingPos(2) = 5
!!          startingPos(3) = 1 !this is ignored since only 2d
!!
!!          dataSize = 3 !just getting 3 cells
!!
!!          allocate(datablock(dataSize))
!!
!!          do blockID = 1, localNumBlocks
!!  
!!             call Grid_getRowData(blockID, CENTER, PRES_VAR, IAXIS, INTERIOR, &
!!                               startingPos, dataBlock, dataSize)
!!  
!!          end do
!!
!!
!!
!!
!!
!!
!! 
!!
!!***


subroutine Grid_getRowData(blockid, cellType, variable, beginCount, &
     row, startingPos, datablock, dataSize)

  use Grid_data, ONLY : gr_iguard, gr_jguard, gr_kguard, gr_maxPatches

  implicit none
#include "constants.h"
#include "Flash.h"

  integer, intent(in) :: blockid, variable, beginCount, row, cellType
  integer, dimension(MDIM), intent(in) :: startingPos
  integer, dimension(2), intent(in) :: dataSize
  real, dimension(datasize(1), dataSize(2)),intent(out) :: datablock

  integer :: levelNum, patchNum

  integer, dimension(MDIM) :: posSamrai
  integer :: varIDSamrai



  !translate blockID to patchNum and levelNum
  levelNum = blockID / gr_maxPatches

  patchNum = mod(blockID, gr_maxPatches)



  !katie, use beginCount to make indices work for samrai
  !first interior cell is 0 in samrai
  if (beginCount == INTERIOR) then
     posSamrai(1) = startingPos(1) - gr_iguard
     posSamrai(2) = startingPos(2) - gr_jguard
     posSamrai(3) = startingPos(3) - gr_kguard
  end if

  !do some error checking
  if (NDIM < 3) then
     posSamrai(3) = 1
  end if

  if (NDIM < 2) then
     posSamrai(2) = 1
  end if


  !samrai indexing starts at 0!
  varIDSamrai = variable - 1

  
  call samrai_get_row_data(patchNum, levelNum, varIDSamrai, row, posSamrai, datablock, datasize)


  
  return
end subroutine Grid_getRowData
