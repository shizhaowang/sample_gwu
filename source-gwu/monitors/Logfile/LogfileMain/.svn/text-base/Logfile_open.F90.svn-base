!!****if* source/monitors/Logfile/LogfileMain/Logfile_open
!! NAME
!!   
!! SYNOPSIS
!!  Logfile_open(integer(out) :: logUnit,
!!               logical(IN)  :: logUnitLocal)
!!
!! DESCRIPTION
!!
!!   FLASH supports two types of logfiles. One that keeps track of the
!!   global state of the simulation, and another type that logs local
!!   information from each processor separately. A simulation generates at most
!!   one global logfile, whereas the number of 
!!   local logfiles generated by the simulation can be anywhere from 0 to 
!!   the number of processors in the simulation. 
!!   
!!   This function opens the global log file, either in append mode 
!!   if it already exists or as a new file. 
!!
!!   The local logfiles are expected to be used mostly for diagnostic
!!   purposes. The local logfiles
!!   are always opened in the append mode, and the handle is returned to 
!!   the calling routine. It is the responsibility of the calling routine
!!   to call Logfile_close after it has finished writing to the logfile.
!!   
!!
!! ARGUMENTS
!!
!!  logUnit - the handle for the file opened by the function, returns a 
!!              0 if no file has been opened
!!  logUnitLocal - if true, indicates that the local logfile should be 
!!                 opened. By default the global logfile is opened.
!! 
!!
!! NOTES
!!  variables that begin with "log_" are defined in the fortran 
!!  module Logfile_data.  The prefix "log_" is meant to indicate
!!  that these variables have Logfile unit scope.  Other variables
!!  are local to the individual subroutines
!!
!! 
!!
!!***

#ifdef DEBUG_ALL
#define DEBUG_LOGFILE
#endif

subroutine Logfile_open(logUnit,logUnitLocal)

  use Logfile_data, ONLY : log_lun, log_fileOpen, log_fileName, &
       log_fileNameLocal, log_fileOpenLocal,log_lunLocal
  use Logfile_interface, ONLY : Logfile_close
  implicit none

  integer,intent(OUT) :: logUnit
  logical,intent(IN) :: logUnitLocal

  integer :: attempts
  integer :: io_status


  if(logUnitLocal) then
     if(log_fileOpenLocal) call Logfile_close(logUnitlocal)
     open (log_lunLocal, file=log_fileNameLocal, position='append', iostat=io_status)
#ifdef DEBUG_LOGFILE
     if (io_status /= 0) then
        write (*,*) 'Local Logfile_open:  Error: cannot open log file; ', &
                'io_status = ', io_status
     end if
#endif
     logUnit=log_lunLocal
     log_fileOpenLocal=.true.
  else
     if (.not. log_fileOpen) then
        attempts = 0
        io_status = 1
        do while ((io_status /= 0) .and. (attempts < 10))
           open (log_lun, file=log_fileName, position='append', iostat=io_status)
           attempts = attempts + 1
        enddo
        if (io_status /= 0) then
           write (*,*) 'Logfile_open:  Error: cannot open log file; ', &
                'io_status = ', io_status
        else
           log_fileOpen = .true.
        endif
     endif
     logUnit=log_lun
  end if
end subroutine Logfile_open

